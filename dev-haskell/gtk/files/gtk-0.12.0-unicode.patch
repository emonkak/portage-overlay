diff --git a/Graphics/UI/Gtk/Abstract/IMContext.chs b/Graphics/UI/Gtk/Abstract/IMContext.chs
index c419761..82f0155 100644
--- a/Graphics/UI/Gtk/Abstract/IMContext.chs
+++ b/Graphics/UI/Gtk/Abstract/IMContext.chs
@@ -71,7 +71,7 @@ import Control.Monad.Trans (liftIO)
 import Data.Maybe (fromMaybe)
 
 import System.Glib.FFI
-import System.Glib.UTFString (readUTFString, withUTFString, genUTFOfs,
+import System.Glib.CString (readCString, withCString, genUTFOfs,
                               ofsToUTF, ofsFromUTF)
 {#import Graphics.UI.Gtk.Types#}
 {#import Graphics.UI.Gtk.Signals#}
@@ -117,7 +117,7 @@ imContextGetPreeditString self =
     attrListPtr
     cursorPosPtr
   >>
-  peek strPtr >>= readUTFString >>= \str ->
+  peek strPtr >>= readCString >>= \str ->
   peek attrListPtr >>= readAttrList (genUTFOfs str) >>= \attrs ->
   peek cursorPosPtr >>= \cursorPos ->
   return (str, attrs, fromIntegral cursorPos)
@@ -202,7 +202,7 @@ imContextSetSurrounding :: IMContextClass self => self
            -- @text@.
  -> IO ()
 imContextSetSurrounding self text cursorIndex =
-  withUTFString text $ \textPtr ->
+  withCString text $ \textPtr ->
   {# call im_context_set_surrounding #}
     (toIMContext self)
     textPtr
@@ -235,7 +235,7 @@ imContextGetSurrounding self =
     textPtr
     cursorIndexPtr >>= \provided ->
   if toBool provided then
-      peek textPtr >>= readUTFString >>= \text ->
+      peek textPtr >>= readCString >>= \text ->
       peek cursorIndexPtr >>= \cursorIndex ->
       return (Just (text, ofsFromUTF (fromIntegral cursorIndex)
                                      (genUTFOfs text)))
diff --git a/Graphics/UI/Gtk/Abstract/Widget.chs b/Graphics/UI/Gtk/Abstract/Widget.chs
index 214ea29..5e6cce6 100644
--- a/Graphics/UI/Gtk/Abstract/Widget.chs
+++ b/Graphics/UI/Gtk/Abstract/Widget.chs
@@ -371,7 +371,7 @@ import Control.Monad.Trans (liftIO)
 import Data.Bits ((.&.), complement)
 import System.Glib.FFI
 import System.Glib.Flags		(fromFlags, toFlags)
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GObject		(wrapNewGObject, makeNewGObject)
@@ -619,7 +619,7 @@ widgetAddAccelerator :: WidgetClass self => self
  -> [AccelFlags]   -- ^ @accelFlags@ - flag accelerators, e.g. 'AccelVisible'
  -> IO ()
 widgetAddAccelerator self accelSignal accelGroup accelKey accelMods accelFlags =
-  withUTFString accelSignal $ \accelSignalPtr ->
+  withCString accelSignal $ \accelSignalPtr ->
   {# call gtk_widget_add_accelerator #}
     (toWidget self)
     accelSignalPtr
@@ -669,7 +669,7 @@ widgetSetAccelPath :: WidgetClass self => self
  -> AccelGroup -- ^ @accelGroup@ - a 'AccelGroup'.
  -> IO ()
 widgetSetAccelPath self accelPath accelGroup =
-  withUTFString accelPath $ \accelPathPtr ->
+  withCString accelPath $ \accelPathPtr ->
   {# call gtk_widget_set_accel_path #}
     (toWidget self)
     accelPathPtr
@@ -786,7 +786,7 @@ widgetSetName :: WidgetClass self => self
  -> String -- ^ @name@ - name for the widget
  -> IO ()
 widgetSetName self name =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call widget_set_name #}
     (toWidget self)
     namePtr
@@ -798,7 +798,7 @@ widgetGetName :: WidgetClass self => self -> IO String
 widgetGetName self =
   {# call unsafe widget_get_name #}
     (toWidget self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- %hash c:25b1 d:f898
 -- | Sets the sensitivity of a widget. A widget is sensitive if the user can
@@ -1291,8 +1291,8 @@ widgetPath self =
     pathReversedPtr
   >>
   peek pathLengthPtr >>= \pathLength ->
-  peek pathPtr >>= readUTFString >>= \path ->
-  peek pathReversedPtr >>= readUTFString >>= \pathReversed ->
+  peek pathPtr >>= readCString >>= \path ->
+  peek pathReversedPtr >>= readCString >>= \pathReversed ->
   return (fromIntegral pathLength, path, pathReversed)
 
 -- %hash c:d4a6
@@ -1314,8 +1314,8 @@ widgetClassPath self =
     pathReversedPtr
   >>
   peek pathLengthPtr >>= \pathLength ->
-  peek pathPtr >>= readUTFString >>= \path ->
-  peek pathReversedPtr >>= readUTFString >>= \pathReversed ->
+  peek pathPtr >>= readCString >>= \path ->
+  peek pathReversedPtr >>= readCString >>= \pathReversed ->
   return (fromIntegral pathLength, path, pathReversed)
 
 -- %hash c:769e
@@ -1327,7 +1327,7 @@ widgetGetCompositeName :: WidgetClass self => self
 widgetGetCompositeName self =
   {# call gtk_widget_get_composite_name #}
     (toWidget self)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- | Modifies style values on the widget. Modifications made using this
 -- technique take precedence over style values set via an RC file, however,
@@ -1525,7 +1525,7 @@ widgetCreateLayout :: WidgetClass self => self
  -> IO PangoLayout
 widgetCreateLayout self text = do
   pl <- wrapNewGObject mkPangoLayoutRaw $
-    withUTFString text $ \textPtr ->
+    withCString text $ \textPtr ->
     {# call unsafe widget_create_pango_layout #}
       (toWidget self)
       textPtr
@@ -1556,8 +1556,8 @@ widgetRenderIcon :: WidgetClass self => self
                       -- wasn't known
 widgetRenderIcon self stockId size detail =
   maybeNull (wrapNewGObject mkPixbuf) $
-  withUTFString detail $ \detailPtr ->
-  withUTFString stockId $ \stockIdPtr ->
+  withCString detail $ \detailPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call gtk_widget_render_icon #}
     (toWidget self)
     stockIdPtr
@@ -1693,7 +1693,7 @@ widgetSetCompositeName :: WidgetClass self => self
  -> String -- ^ @name@ - the name to set.
  -> IO ()
 widgetSetCompositeName self name =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call gtk_widget_set_composite_name #}
     (toWidget self)
     namePtr
diff --git a/Graphics/UI/Gtk/ActionMenuToolbar/Action.chs b/Graphics/UI/Gtk/ActionMenuToolbar/Action.chs
index 084482a..a5a6535 100644
--- a/Graphics/UI/Gtk/ActionMenuToolbar/Action.chs
+++ b/Graphics/UI/Gtk/ActionMenuToolbar/Action.chs
@@ -147,7 +147,7 @@ module Graphics.UI.Gtk.ActionMenuToolbar.Action (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GList
 import System.Glib.Attributes
 import System.Glib.Properties
@@ -179,10 +179,10 @@ actionNew ::
  -> IO Action
 actionNew name label tooltip stockId =
   wrapNewGObject mkAction $
-  maybeWith withUTFString stockId $ \stockIdPtr ->
-  maybeWith withUTFString tooltip $ \tooltipPtr ->
-  withUTFString label $ \labelPtr ->
-  withUTFString name $ \namePtr ->
+  maybeWith withCString stockId $ \stockIdPtr ->
+  maybeWith withCString tooltip $ \tooltipPtr ->
+  withCString label $ \labelPtr ->
+  withCString name $ \namePtr ->
   {# call gtk_action_new #}
     namePtr
     labelPtr
@@ -198,7 +198,7 @@ actionGetName :: ActionClass self => self -> IO String
 actionGetName self =
   {# call gtk_action_get_name #}
     (toAction self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Returns whether the action is effectively sensitive.
 --
@@ -366,7 +366,7 @@ actionGetAccelPath :: ActionClass self => self
 actionGetAccelPath self =
   {# call gtk_action_get_accel_path #}
     (toAction self)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 #endif
 
 -- | Sets the accel path for this action. All proxy widgets associated with
@@ -377,7 +377,7 @@ actionSetAccelPath :: ActionClass self => self
  -> String -- ^ @accelPath@ - the accelerator path
  -> IO ()
 actionSetAccelPath self accelPath =
-  withUTFString accelPath $ \accelPathPtr ->
+  withCString accelPath $ \accelPathPtr ->
   {# call gtk_action_set_accel_path #}
     (toAction self)
     accelPathPtr
diff --git a/Graphics/UI/Gtk/ActionMenuToolbar/ActionGroup.chs b/Graphics/UI/Gtk/ActionMenuToolbar/ActionGroup.chs
index b280264..979d957 100644
--- a/Graphics/UI/Gtk/ActionMenuToolbar/ActionGroup.chs
+++ b/Graphics/UI/Gtk/ActionMenuToolbar/ActionGroup.chs
@@ -109,7 +109,7 @@ module Graphics.UI.Gtk.ActionMenuToolbar.ActionGroup (
 import Control.Monad	(liftM, foldM, when)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GList
 import System.Glib.Attributes
 import System.Glib.Properties
@@ -136,7 +136,7 @@ actionGroupNew ::
  -> IO ActionGroup
 actionGroupNew name =
   wrapNewGObject mkActionGroup $
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call gtk_action_group_new #}
     namePtr
 
@@ -150,7 +150,7 @@ actionGroupGetName :: ActionGroup
 actionGroupGetName self =
   {# call gtk_action_group_get_name #}
     self
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Returns @True@ if the group is sensitive. The constituent actions can
 -- only be logically sensitive (see 'actionIsSensitive') if they are sensitive
@@ -196,7 +196,7 @@ actionGroupGetAction :: ActionGroup
                       -- that name exists
 actionGroupGetAction self actionName =
   maybeNull (makeNewGObject mkAction) $
-  withUTFString actionName $ \actionNamePtr ->
+  withCString actionName $ \actionNamePtr ->
   {# call gtk_action_group_get_action #}
     self
     actionNamePtr
@@ -237,7 +237,7 @@ actionGroupAddActionWithAccel :: ActionClass action => ActionGroup
                  -- accelerator, or @Nothing@ to use the stock accelerator
  -> IO ()
 actionGroupAddActionWithAccel self action accelerator =
-  maybeWith withUTFString accelerator $ \acceleratorPtr ->
+  maybeWith withCString accelerator $ \acceleratorPtr ->
   {# call gtk_action_group_add_action_with_accel #}
     self
     (toAction action)
@@ -362,9 +362,9 @@ actionGroupSetTranslateFunc :: ActionGroup
  -> IO ()
 actionGroupSetTranslateFunc self func = do
   funcPtr <- mkTranslateFunc $ \strPtr _ -> do
-               str <- peekUTFString strPtr
+               str <- peekCString strPtr
                translatedStr <- func str
-               newUTFString translatedStr
+               newCString translatedStr
   {# call gtk_action_group_set_translate_func #}
     self
     funcPtr
@@ -387,7 +387,7 @@ actionGroupSetTranslationDomain :: ActionGroup
                 -- calls
  -> IO ()
 actionGroupSetTranslationDomain self domain =
-  withUTFString domain $ \domainPtr ->
+  withCString domain $ \domainPtr ->
   {# call gtk_action_group_set_translation_domain #}
     self
     domainPtr
@@ -401,11 +401,11 @@ actionGroupTranslateString :: ActionGroup
  -> String      -- ^ @string@ - a string
  -> IO String   -- ^ returns the translation of @string@
 actionGroupTranslateString self string =
-  withUTFString string $ \stringPtr ->
+  withCString string $ \stringPtr ->
   {# call gtk_action_group_translate_string #}
     self
     stringPtr
-  >>= peekUTFString
+  >>= peekCString
 #endif
 
 --------------------
diff --git a/Graphics/UI/Gtk/ActionMenuToolbar/RadioAction.chs b/Graphics/UI/Gtk/ActionMenuToolbar/RadioAction.chs
index 6956c3f..95e3fe6 100644
--- a/Graphics/UI/Gtk/ActionMenuToolbar/RadioAction.chs
+++ b/Graphics/UI/Gtk/ActionMenuToolbar/RadioAction.chs
@@ -84,7 +84,7 @@ module Graphics.UI.Gtk.ActionMenuToolbar.RadioAction (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GList
 import System.Glib.Attributes
 import System.Glib.Properties
@@ -115,10 +115,10 @@ radioActionNew ::
  -> IO RadioAction
 radioActionNew name label tooltip stockId value =
   wrapNewGObject mkRadioAction $
-  maybeWith withUTFString stockId $ \stockIdPtr ->
-  maybeWith withUTFString tooltip $ \tooltipPtr ->
-  withUTFString label $ \labelPtr ->
-  withUTFString name $ \namePtr ->
+  maybeWith withCString stockId $ \stockIdPtr ->
+  maybeWith withCString tooltip $ \tooltipPtr ->
+  withCString label $ \labelPtr ->
+  withCString name $ \namePtr ->
   {# call gtk_radio_action_new #}
     namePtr
     labelPtr
diff --git a/Graphics/UI/Gtk/ActionMenuToolbar/RecentAction.chs b/Graphics/UI/Gtk/ActionMenuToolbar/RecentAction.chs
index 42bf831..d83e840 100644
--- a/Graphics/UI/Gtk/ActionMenuToolbar/RecentAction.chs
+++ b/Graphics/UI/Gtk/ActionMenuToolbar/RecentAction.chs
@@ -70,7 +70,7 @@ import Data.Maybe (fromMaybe)
 import System.Glib.FFI
 import System.Glib.Attributes
 import System.Glib.Properties
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GObject		(wrapNewGObject)
 {#import Graphics.UI.Gtk.Types#}
 
@@ -94,10 +94,10 @@ recentActionNew ::
 recentActionNew name label tooltip stockId =
   wrapNewGObject mkRecentAction $ 
   liftM castPtr $
-  withUTFString name $ \namePtr ->
-  maybeWith withUTFString label $ \labelPtr ->
-  maybeWith withUTFString tooltip $ \tooltipPtr ->
-  maybeWith withUTFString stockId $ \stockIdPtr ->
+  withCString name $ \namePtr ->
+  maybeWith withCString label $ \labelPtr ->
+  maybeWith withCString tooltip $ \tooltipPtr ->
+  maybeWith withCString stockId $ \stockIdPtr ->
   {# call gtk_recent_action_new #}
     namePtr
     labelPtr
@@ -120,10 +120,10 @@ recentActionNewForManager :: RecentManagerClass manager =>
  -> IO RecentAction
 recentActionNewForManager name label tooltip stockId manager =
   wrapNewGObject mkRecentAction $ liftM castPtr $
-  withUTFString name $ \namePtr ->
-  maybeWith withUTFString label $ \labelPtr ->
-  maybeWith withUTFString tooltip $ \tooltipPtr ->
-  maybeWith withUTFString stockId $ \stockIdPtr -> do
+  withCString name $ \namePtr ->
+  maybeWith withCString label $ \labelPtr ->
+  maybeWith withCString tooltip $ \tooltipPtr ->
+  maybeWith withCString stockId $ \stockIdPtr -> do
     {# call gtk_recent_action_new_for_manager #}
       namePtr
       labelPtr
diff --git a/Graphics/UI/Gtk/ActionMenuToolbar/ToggleAction.chs b/Graphics/UI/Gtk/ActionMenuToolbar/ToggleAction.chs
index 02e445c..fafed2c 100644
--- a/Graphics/UI/Gtk/ActionMenuToolbar/ToggleAction.chs
+++ b/Graphics/UI/Gtk/ActionMenuToolbar/ToggleAction.chs
@@ -80,7 +80,7 @@ module Graphics.UI.Gtk.ActionMenuToolbar.ToggleAction (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GObject		(wrapNewGObject)
@@ -108,10 +108,10 @@ toggleActionNew ::
  -> IO ToggleAction
 toggleActionNew name label tooltip stockId =
   wrapNewGObject mkToggleAction $
-  maybeWith withUTFString stockId $ \stockIdPtr ->
-  maybeWith withUTFString tooltip $ \tooltipPtr ->
-  withUTFString label $ \labelPtr ->
-  withUTFString name $ \namePtr ->
+  maybeWith withCString stockId $ \stockIdPtr ->
+  maybeWith withCString tooltip $ \tooltipPtr ->
+  withCString label $ \labelPtr ->
+  withCString name $ \namePtr ->
   {# call gtk_toggle_action_new #}
     namePtr
     labelPtr
diff --git a/Graphics/UI/Gtk/ActionMenuToolbar/UIManager.chs b/Graphics/UI/Gtk/ActionMenuToolbar/UIManager.chs
index 0d6efe4..16a818a 100644
--- a/Graphics/UI/Gtk/ActionMenuToolbar/UIManager.chs
+++ b/Graphics/UI/Gtk/ActionMenuToolbar/UIManager.chs
@@ -257,7 +257,7 @@ import Control.Monad	(liftM)
 
 import System.Glib.FFI
 import System.Glib.Flags		(Flags, fromFlags)
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GList
 import System.Glib.GError
 import System.Glib.Attributes
@@ -381,7 +381,7 @@ uiManagerGetWidget :: UIManager
                       -- @Nothing@ if no widget was found.
 uiManagerGetWidget self path =
   maybeNull (makeNewObject mkWidget) $
-  withUTFString path $ \pathPtr ->
+  withCString path $ \pathPtr ->
   {# call gtk_ui_manager_get_widget #}
     self
     pathPtr
@@ -412,7 +412,7 @@ uiManagerGetAction :: UIManager
                       -- found.
 uiManagerGetAction self path =
   maybeNull (makeNewGObject mkAction) $
-  withUTFString path $ \pathPtr ->
+  withCString path $ \pathPtr ->
   {# call gtk_ui_manager_get_action #}
     self
     pathPtr
@@ -429,7 +429,7 @@ uiManagerAddUiFromString :: UIManager
 uiManagerAddUiFromString self buffer =
   liftM MergeId $
   propagateGError $ \errorPtr ->
-  withUTFStringLen buffer $ \(bufferPtr, length) ->
+  withCStringLen buffer $ \(bufferPtr, length) ->
   {# call gtk_ui_manager_add_ui_from_string #}
     self
     bufferPtr
@@ -448,7 +448,7 @@ uiManagerAddUiFromFile :: UIManager
 uiManagerAddUiFromFile self filename =
   liftM MergeId $
   propagateGError $ \errorPtr ->
-  withUTFString filename $ \filenamePtr ->
+  withCString filename $ \filenamePtr ->
 #if defined (WIN32) && GTK_CHECK_VERSION(2,6,0)
   {# call gtk_ui_manager_add_ui_from_file_utf8 #}
 #else
@@ -481,9 +481,9 @@ uiManagerAddUi :: UIManager
                         -- siblings.
  -> IO ()
 uiManagerAddUi self mergeId path name action type_ top =
-  maybeWith withUTFString action $ \actionPtr ->
-  withUTFString name $ \namePtr ->
-  withUTFString path $ \pathPtr ->
+  maybeWith withCString action $ \actionPtr ->
+  withCString name $ \namePtr ->
+  withCString path $ \pathPtr ->
   {# call gtk_ui_manager_add_ui #}
     self
     (fromMergeId mergeId)
@@ -512,7 +512,7 @@ uiManagerGetUi :: UIManager
 uiManagerGetUi self =
   {# call gtk_ui_manager_get_ui #}
     self
-  >>= readUTFString
+  >>= readCString
 
 -- | Makes sure that all pending updates to the UI have been completed.
 --
diff --git a/Graphics/UI/Gtk/Builder.chs b/Graphics/UI/Gtk/Builder.chs
index bfb46d4..723ca03 100644
--- a/Graphics/UI/Gtk/Builder.chs
+++ b/Graphics/UI/Gtk/Builder.chs
@@ -99,7 +99,7 @@ import Control.Exception (evaluate, throwIO, ErrorCall (..))
 import System.Glib.FFI
 import System.Glib.GError
 import System.Glib.GList
-import System.Glib.UTFString
+import System.Glib.CString
 import Graphics.UI.Gtk.Abstract.Object (makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
 
@@ -126,7 +126,7 @@ builderNew =
 builderAddFromFile :: Builder -> FilePath -> IO ()
 builderAddFromFile builder path =
   propagateGError $ \errPtrPtr ->
-  withUTFString path $ \pathPtr ->
+  withCString path $ \pathPtr ->
   {# call unsafe builder_add_from_file #}
     builder pathPtr errPtrPtr
     >> return ()
@@ -141,7 +141,7 @@ builderAddFromFile builder path =
 builderAddFromString :: Builder -> String -> IO ()
 builderAddFromString builder str =
   propagateGError $ \errPtrPtr ->
-  withUTFStringLen str $ \(strPtr, strLen) ->
+  withCStringLen str $ \(strPtr, strLen) ->
   {# call unsafe builder_add_from_string #}
     builder strPtr (fromIntegral strLen) errPtrPtr
     >> return ()
@@ -162,8 +162,8 @@ builderAddObjectsFromFile ::
  -> IO ()
 builderAddObjectsFromFile builder path ids =
   propagateGError $ \errPtrPtr ->
-  withUTFString path $ \pathPtr ->
-  withUTFStringArray0 ids $ \idsPtr ->
+  withCString path $ \pathPtr ->
+  withCStringArray0 ids $ \idsPtr ->
   {# call unsafe builder_add_objects_from_file #}
     builder pathPtr idsPtr errPtrPtr
     >> return ()
@@ -183,8 +183,8 @@ builderAddObjectsFromString ::
  -> IO ()
 builderAddObjectsFromString builder str ids =
   propagateGError $ \errPtrPtr ->
-  withUTFStringLen str $ \(strPtr, strLen) ->
-  withUTFStringArray0 ids $ \idsPtr ->
+  withCStringLen str $ \(strPtr, strLen) ->
+  withCStringArray0 ids $ \idsPtr ->
   {# call unsafe builder_add_objects_from_string #}
     builder strPtr (fromIntegral strLen) idsPtr errPtrPtr
     >> return ()
@@ -199,7 +199,7 @@ builderGetObjectRaw :: Builder
  -> String           -- The ID of the object in the UI file, eg \"button1\".
  -> IO (Maybe GObject)
 builderGetObjectRaw builder name =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   maybeNull (makeNewGObject mkGObject) $
   {# call unsafe builder_get_object #}
     builder namePtr
@@ -237,7 +237,7 @@ builderGetObjects builder =
 -- | Sets the translation domain of the 'Builder'.
 builderSetTranslationDomain :: Builder -> Maybe String -> IO ()
 builderSetTranslationDomain builder domain =
-  maybeWith withUTFString domain $ \domainPtr ->
+  maybeWith withCString domain $ \domainPtr ->
   {# call unsafe builder_set_translation_domain #}
     builder domainPtr
 
@@ -246,6 +246,6 @@ builderGetTranslationDomain :: Builder -> IO (Maybe String)
 builderGetTranslationDomain builder =
   {# call unsafe builder_get_translation_domain #}
     builder
-    >>= maybePeek peekUTFString
+    >>= maybePeek peekCString
 
 #endif
diff --git a/Graphics/UI/Gtk/Buttons/Button.chs b/Graphics/UI/Gtk/Buttons/Button.chs
index f6fa7da..eda0094 100644
--- a/Graphics/UI/Gtk/Buttons/Button.chs
+++ b/Graphics/UI/Gtk/Buttons/Button.chs
@@ -139,7 +139,7 @@ module Graphics.UI.Gtk.Buttons.Button (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -170,7 +170,7 @@ buttonNewWithLabel ::
 buttonNewWithLabel label =
   makeNewObject mkButton $
   liftM (castPtr :: Ptr Widget -> Ptr Button) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe button_new_with_label #}
     labelPtr
 
@@ -187,7 +187,7 @@ buttonNewWithMnemonic ::
 buttonNewWithMnemonic label =
   makeNewObject mkButton $
   liftM (castPtr :: Ptr Widget -> Ptr Button) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe button_new_with_mnemonic #}
     labelPtr
 
@@ -202,7 +202,7 @@ buttonNewFromStock ::
 buttonNewFromStock stockId =
   makeNewObject mkButton $
   liftM (castPtr :: Ptr Widget -> Ptr Button) $
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   throwIfNull "buttonNewFromStock: Invalid stock identifier." $ 
   {# call unsafe button_new_from_stock #}
     stockIdPtr
@@ -305,7 +305,7 @@ buttonYAlign = newAttrFromFloatProperty "yalign"
 --
 buttonSetLabel :: ButtonClass self => self -> String -> IO ()
 buttonSetLabel self label =
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call button_set_label #}
     (toButton self)
     labelPtr
@@ -320,7 +320,7 @@ buttonGetLabel :: ButtonClass self => self -> IO String
 buttonGetLabel self = do
   strPtr <- {# call unsafe button_get_label #}
     (toButton self)
-  if strPtr==nullPtr then return "" else peekUTFString strPtr
+  if strPtr==nullPtr then return "" else peekCString strPtr
 
 -- | If true, the label set on the button is used as a stock id to select the
 -- stock item for the button.
diff --git a/Graphics/UI/Gtk/Buttons/CheckButton.chs b/Graphics/UI/Gtk/Buttons/CheckButton.chs
index 1226ab7..48ad9b0 100644
--- a/Graphics/UI/Gtk/Buttons/CheckButton.chs
+++ b/Graphics/UI/Gtk/Buttons/CheckButton.chs
@@ -63,7 +63,7 @@ module Graphics.UI.Gtk.Buttons.CheckButton (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
 
@@ -88,7 +88,7 @@ checkButtonNewWithLabel ::
 checkButtonNewWithLabel label =
   makeNewObject mkCheckButton $
   liftM (castPtr :: Ptr Widget -> Ptr CheckButton) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe check_button_new_with_label #}
     labelPtr
 
@@ -103,6 +103,6 @@ checkButtonNewWithMnemonic ::
 checkButtonNewWithMnemonic label =
   makeNewObject mkCheckButton $
   liftM (castPtr :: Ptr Widget -> Ptr CheckButton) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe check_button_new_with_mnemonic #}
     labelPtr
diff --git a/Graphics/UI/Gtk/Buttons/LinkButton.chs b/Graphics/UI/Gtk/Buttons/LinkButton.chs
index a1d157a..b45c652 100644
--- a/Graphics/UI/Gtk/Buttons/LinkButton.chs
+++ b/Graphics/UI/Gtk/Buttons/LinkButton.chs
@@ -85,7 +85,7 @@ module Graphics.UI.Gtk.Buttons.LinkButton (
 import Control.Monad	(liftM, unless)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -107,7 +107,7 @@ linkButtonNew ::
 linkButtonNew uri =
   makeNewObject mkLinkButton $
   liftM (castPtr :: Ptr Widget -> Ptr LinkButton) $
-  withUTFString uri $ \uriPtr ->
+  withCString uri $ \uriPtr ->
   {# call gtk_link_button_new #}
     uriPtr
 
@@ -120,8 +120,8 @@ linkButtonNewWithLabel ::
 linkButtonNewWithLabel uri label =
   makeNewObject mkLinkButton $
   liftM (castPtr :: Ptr Widget -> Ptr LinkButton) $
-  withUTFString label $ \labelPtr ->
-  withUTFString uri $ \uriPtr ->
+  withCString label $ \labelPtr ->
+  withCString uri $ \uriPtr ->
   {# call gtk_link_button_new_with_label #}
     uriPtr
     labelPtr
diff --git a/Graphics/UI/Gtk/Buttons/RadioButton.chs b/Graphics/UI/Gtk/Buttons/RadioButton.chs
index 3c23612..49b2e4d 100644
--- a/Graphics/UI/Gtk/Buttons/RadioButton.chs
+++ b/Graphics/UI/Gtk/Buttons/RadioButton.chs
@@ -143,7 +143,7 @@ module Graphics.UI.Gtk.Buttons.RadioButton (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GList
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -171,7 +171,7 @@ radioButtonNewWithLabel :: String -> IO RadioButton
 radioButtonNewWithLabel label =
   makeNewObject mkRadioButton $
   liftM (castPtr :: Ptr Widget -> Ptr RadioButton) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe radio_button_new_with_label #}
     nullPtr
     labelPtr
@@ -188,7 +188,7 @@ radioButtonNewWithMnemonic ::
 radioButtonNewWithMnemonic label =
   makeNewObject mkRadioButton $
   liftM (castPtr :: Ptr Widget -> Ptr RadioButton) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe radio_button_new_with_mnemonic #}
     nullPtr
     labelPtr
@@ -219,7 +219,7 @@ radioButtonNewWithLabelFromWidget ::
 radioButtonNewWithLabelFromWidget group label =
   makeNewObject mkRadioButton $
   liftM (castPtr :: Ptr Widget -> Ptr RadioButton) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call radio_button_new_with_label_from_widget #}
     group
     labelPtr
@@ -238,7 +238,7 @@ radioButtonNewWithMnemonicFromWidget ::
 radioButtonNewWithMnemonicFromWidget group label =
   makeNewObject mkRadioButton $
   liftM (castPtr :: Ptr Widget -> Ptr RadioButton) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call radio_button_new_with_mnemonic_from_widget #}
     group
     labelPtr
diff --git a/Graphics/UI/Gtk/Buttons/ScaleButton.chs b/Graphics/UI/Gtk/Buttons/ScaleButton.chs
index 73a2329..78ca11c 100644
--- a/Graphics/UI/Gtk/Buttons/ScaleButton.chs
+++ b/Graphics/UI/Gtk/Buttons/ScaleButton.chs
@@ -84,7 +84,7 @@ module Graphics.UI.Gtk.Buttons.ScaleButton (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -117,7 +117,7 @@ scaleButtonNew ::
 scaleButtonNew size min max step icons =
   makeNewObject mkScaleButton $
   liftM (castPtr :: Ptr Widget -> Ptr ScaleButton) $
-  withUTFStringArray0 icons $ \iconsPtr ->
+  withCStringArray0 icons $ \iconsPtr ->
   {# call gtk_scale_button_new #}
     ((fromIntegral . fromEnum) size)
     (realToFrac min)
@@ -133,7 +133,7 @@ scaleButtonSetIcons :: ScaleButtonClass self => self
  -> [String] -- ^ @icons@
  -> IO ()
 scaleButtonSetIcons self icons =
-  withUTFStringArray0 icons $ \iconsPtr ->
+  withCStringArray0 icons $ \iconsPtr ->
   {# call gtk_scale_button_set_icons #}
     (toScaleButton self)
     iconsPtr
@@ -208,8 +208,8 @@ scaleButtonAdjustment = newAttrFromObjectProperty "adjustment"
 -- Since 2.12
 scaleButtonIcons :: ScaleButtonClass self => ReadWriteAttr self [String] (Maybe [String])
 scaleButtonIcons =
-  newAttr (objectGetPropertyBoxedOpaque (peekUTFStringArray0 . castPtr) gtype "search-path")
-          (objectSetPropertyBoxedOpaque (\dirs f -> maybeWith withUTFStringArray0 dirs (f . castPtr)) gtype "search-path")
+  newAttr (objectGetPropertyBoxedOpaque (peekCStringArray0 . castPtr) gtype "search-path")
+          (objectSetPropertyBoxedOpaque (\dirs f -> maybeWith withCStringArray0 dirs (f . castPtr)) gtype "search-path")
   where gtype = {#call pure g_strv_get_type#}
 
 
diff --git a/Graphics/UI/Gtk/Buttons/ToggleButton.chs b/Graphics/UI/Gtk/Buttons/ToggleButton.chs
index 1403c57..33900e8 100644
--- a/Graphics/UI/Gtk/Buttons/ToggleButton.chs
+++ b/Graphics/UI/Gtk/Buttons/ToggleButton.chs
@@ -95,7 +95,7 @@ module Graphics.UI.Gtk.Buttons.ToggleButton (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -125,7 +125,7 @@ toggleButtonNewWithLabel ::
 toggleButtonNewWithLabel label =
   makeNewObject mkToggleButton $
   liftM (castPtr :: Ptr Widget -> Ptr ToggleButton) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe toggle_button_new_with_label #}
     labelPtr
 
@@ -141,7 +141,7 @@ toggleButtonNewWithMnemonic ::
 toggleButtonNewWithMnemonic label =
   makeNewObject mkToggleButton $
   liftM (castPtr :: Ptr Widget -> Ptr ToggleButton) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe toggle_button_new_with_mnemonic #}
     labelPtr
 
diff --git a/Graphics/UI/Gtk/Display/AccelLabel.chs b/Graphics/UI/Gtk/Display/AccelLabel.chs
index e247df7..19387e1 100644
--- a/Graphics/UI/Gtk/Display/AccelLabel.chs
+++ b/Graphics/UI/Gtk/Display/AccelLabel.chs
@@ -86,7 +86,7 @@ module Graphics.UI.Gtk.Display.AccelLabel (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
@@ -104,7 +104,7 @@ accelLabelNew ::
 accelLabelNew string =
   makeNewObject mkAccelLabel $
   liftM (castPtr :: Ptr Widget -> Ptr AccelLabel) $
-  withUTFString string $ \stringPtr ->
+  withCString string $ \stringPtr ->
   {# call unsafe accel_label_new #}
     stringPtr
 
diff --git a/Graphics/UI/Gtk/Display/Image.chs b/Graphics/UI/Gtk/Display/Image.chs
index 0605d7c..6a7df7c 100644
--- a/Graphics/UI/Gtk/Display/Image.chs
+++ b/Graphics/UI/Gtk/Display/Image.chs
@@ -142,7 +142,7 @@ module Graphics.UI.Gtk.Display.Image (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -187,7 +187,7 @@ imageNewFromFile :: FilePath -> IO Image
 imageNewFromFile filename =
   makeNewObject mkImage $
   liftM (castPtr :: Ptr Widget -> Ptr Image) $
-  withUTFString filename $ \filenamePtr ->
+  withCString filename $ \filenamePtr ->
 #if defined (WIN32) && GTK_CHECK_VERSION(2,6,0)
   {# call unsafe gtk_image_new_from_file_utf8 #}
 #else
@@ -225,7 +225,7 @@ imageNewFromStock ::
 imageNewFromStock stockId size =
   makeNewObject mkImage $
   liftM (castPtr :: Ptr Widget -> Ptr Image) $
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call unsafe image_new_from_stock #}
     stockIdPtr
     ((fromIntegral . fromEnum) size)
@@ -252,7 +252,7 @@ imageNewFromIconName ::
 imageNewFromIconName iconName size =
   makeNewObject mkImage $
   liftM (castPtr :: Ptr Widget -> Ptr Image) $
-  withUTFString iconName $ \iconNamePtr ->
+  withCString iconName $ \iconNamePtr ->
   {# call gtk_image_new_from_icon_name #}
     iconNamePtr
     ((fromIntegral . fromEnum) size)
@@ -290,7 +290,7 @@ imageSetFromAnimation self pba =
 --
 imageSetFromFile :: Image -> FilePath -> IO ()
 imageSetFromFile self filename =
-  withUTFString filename $ \filenamePtr ->
+  withCString filename $ \filenamePtr ->
 #if defined (WIN32) && GTK_CHECK_VERSION(2,6,0)
   {# call gtk_image_set_from_file_utf8 #}
 #else
@@ -306,7 +306,7 @@ imageSetFromStock :: Image
  -> IconSize -- ^ @size@ - a stock icon size
  -> IO ()
 imageSetFromStock self stockId size =
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call gtk_image_set_from_stock #}
     self
     stockIdPtr
@@ -322,7 +322,7 @@ imageSetFromIconName :: Image
  -> IconSize -- ^ @size@ - an icon size
  -> IO ()
 imageSetFromIconName self iconName size =
-  withUTFString iconName $ \iconNamePtr ->
+  withCString iconName $ \iconNamePtr ->
   {# call gtk_image_set_from_icon_name #}
     self
     iconNamePtr
diff --git a/Graphics/UI/Gtk/Display/InfoBar.chs b/Graphics/UI/Gtk/Display/InfoBar.chs
index 112af82..6adc8a1 100644
--- a/Graphics/UI/Gtk/Display/InfoBar.chs
+++ b/Graphics/UI/Gtk/Display/InfoBar.chs
@@ -97,7 +97,7 @@ module Graphics.UI.Gtk.Display.InfoBar (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 {#import Graphics.UI.Gtk.Abstract.Object#}	(makeNewObject)
@@ -159,7 +159,7 @@ infoBarAddButton :: InfoBarClass self => self
  -> IO Button -- ^ returns the button widget that was added
 infoBarAddButton self buttonText responseId =
   makeNewObject mkButton $
-  withUTFString buttonText $ \buttonTextPtr ->
+  withCString buttonText $ \buttonTextPtr ->
   liftM (castPtr :: Ptr Widget -> Ptr Button) $
      {# call gtk_info_bar_add_button #}
        (toInfoBar self)
diff --git a/Graphics/UI/Gtk/Display/Label.chs b/Graphics/UI/Gtk/Display/Label.chs
index 02e38e1..c6b7990 100644
--- a/Graphics/UI/Gtk/Display/Label.chs
+++ b/Graphics/UI/Gtk/Display/Label.chs
@@ -194,7 +194,7 @@ module Graphics.UI.Gtk.Display.Label (
 import Control.Monad    (liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GObject              (makeNewGObject)
@@ -226,7 +226,7 @@ labelNew :: Maybe String -> IO Label
 labelNew str =
   makeNewObject mkLabel $
   liftM (castPtr :: Ptr Widget -> Ptr Label) $
-  maybeWith withUTFString str $ \strPtr ->
+  maybeWith withCString str $ \strPtr ->
   {# call label_new #}
     strPtr
 
@@ -251,7 +251,7 @@ labelNewWithMnemonic ::
 labelNewWithMnemonic str =
   makeNewObject mkLabel $
   liftM (castPtr :: Ptr Widget -> Ptr Label) $
-  withUTFString str $ \strPtr ->
+  withCString str $ \strPtr ->
   {# call label_new_with_mnemonic #}
     strPtr
 
@@ -265,7 +265,7 @@ labelNewWithMnemonic str =
 --
 labelSetText :: LabelClass self => self -> String -> IO ()
 labelSetText self str =
-  withUTFString str $ \strPtr ->
+  withCString str $ \strPtr ->
   {# call label_set_text #}
     (toLabel self)
     strPtr
@@ -276,7 +276,7 @@ labelSetText self str =
 --
 labelSetLabel :: LabelClass self => self -> String -> IO ()
 labelSetLabel self str =
-  withUTFString str $ \strPtr ->
+  withCString str $ \strPtr ->
   {# call label_set_label #}
     (toLabel self)
     strPtr
@@ -321,7 +321,7 @@ labelSetMarkup :: LabelClass self => self
  -> Markup -- ^ @str@ - a markup string (see Pango markup format)
  -> IO ()
 labelSetMarkup self str =
-  withUTFString str $ \strPtr ->
+  withCString str $ \strPtr ->
   {# call label_set_markup #}
     (toLabel self)
     strPtr
@@ -339,7 +339,7 @@ labelSetMarkupWithMnemonic :: LabelClass self => self
  -> Markup -- ^ @str@ - a markup string (see Pango markup format)
  -> IO ()
 labelSetMarkupWithMnemonic self str =
-  withUTFString str $ \strPtr ->
+  withCString str $ \strPtr ->
   {# call label_set_markup_with_mnemonic #}
     (toLabel self)
     strPtr
@@ -349,7 +349,7 @@ labelSetMarkupWithMnemonic self str =
 --
 labelSetPattern :: LabelClass l => l -> [Int] -> IO ()
 labelSetPattern self list =
-  withUTFString str $
+  withCString str $
   {# call label_set_pattern #}
     (toLabel self)
   where
@@ -519,7 +519,7 @@ labelGetText :: LabelClass self => self -> IO String
 labelGetText self =
   {# call unsafe label_get_text #}
     (toLabel self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Gets the text from a label widget including any embedded underlines
 -- indicating mnemonics and Pango markup. (See 'labelGetText').
@@ -528,7 +528,7 @@ labelGetLabel :: LabelClass self => self -> IO String
 labelGetLabel self =
   {# call unsafe label_get_label #}
     (toLabel self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Selects a range of characters in the label, if the label is selectable.
 -- See 'labelSetSelectable'. If the label is not selectable, this function has
@@ -619,7 +619,7 @@ labelSetSelectable self setting =
 --
 labelSetTextWithMnemonic :: LabelClass self => self -> String -> IO ()
 labelSetTextWithMnemonic self str =
-  withUTFString str $ \strPtr ->
+  withCString str $ \strPtr ->
   {# call label_set_text_with_mnemonic #}
     (toLabel self)
     strPtr
diff --git a/Graphics/UI/Gtk/Display/ProgressBar.chs b/Graphics/UI/Gtk/Display/ProgressBar.chs
index c277165..f21a00f 100644
--- a/Graphics/UI/Gtk/Display/ProgressBar.chs
+++ b/Graphics/UI/Gtk/Display/ProgressBar.chs
@@ -99,7 +99,7 @@ module Graphics.UI.Gtk.Display.ProgressBar (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -140,7 +140,7 @@ progressBarPulse self =
 --
 progressBarSetText :: ProgressBarClass self => self -> String -> IO ()
 progressBarSetText self text =
-  withUTFString text $ \textPtr ->
+  withCString text $ \textPtr ->
   {# call unsafe progress_bar_set_text #}
     (toProgressBar self)
     textPtr
@@ -193,7 +193,7 @@ progressBarGetText :: ProgressBarClass self => self
 progressBarGetText self =
   {# call unsafe progress_bar_get_text #}
     (toProgressBar self)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- | Causes the progress bar to switch to a different orientation
 -- (left-to-right, right-to-left, top-to-bottom, or bottom-to-top).
diff --git a/Graphics/UI/Gtk/Display/Spinner.chs b/Graphics/UI/Gtk/Display/Spinner.chs
index b8e1880..947a4e2 100644
--- a/Graphics/UI/Gtk/Display/Spinner.chs
+++ b/Graphics/UI/Gtk/Display/Spinner.chs
@@ -53,7 +53,7 @@ module Graphics.UI.Gtk.Display.Spinner (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
diff --git a/Graphics/UI/Gtk/Display/StatusIcon.chs b/Graphics/UI/Gtk/Display/StatusIcon.chs
index ef3e1bf..3039d5e 100644
--- a/Graphics/UI/Gtk/Display/StatusIcon.chs
+++ b/Graphics/UI/Gtk/Display/StatusIcon.chs
@@ -128,7 +128,7 @@ module Graphics.UI.Gtk.Display.StatusIcon (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GObject		(wrapNewGObject,makeNewGObject)
@@ -180,7 +180,7 @@ statusIconNewFromFile ::
  -> IO StatusIcon
 statusIconNewFromFile filename =
   wrapNewGObject mkStatusIcon $
-  withUTFString filename $ \filenamePtr ->
+  withCString filename $ \filenamePtr ->
   {# call gtk_status_icon_new_from_file #}
     filenamePtr
 
@@ -195,7 +195,7 @@ statusIconNewFromStock ::
  -> IO StatusIcon
 statusIconNewFromStock stockId =
   wrapNewGObject mkStatusIcon $
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call gtk_status_icon_new_from_stock #}
     stockIdPtr
 
@@ -208,7 +208,7 @@ statusIconNewFromIconName ::
  -> IO StatusIcon
 statusIconNewFromIconName iconName =
   wrapNewGObject mkStatusIcon $
-  withUTFString iconName $ \iconNamePtr ->
+  withCString iconName $ \iconNamePtr ->
   {# call gtk_status_icon_new_from_icon_name #}
     iconNamePtr
 
@@ -235,7 +235,7 @@ statusIconSetFromFile :: StatusIconClass self => self
  -> String -- ^ @filename@ - a filename
  -> IO ()
 statusIconSetFromFile self filename =
-  withUTFString filename $ \filenamePtr ->
+  withCString filename $ \filenamePtr ->
   {# call gtk_status_icon_set_from_file #}
     (toStatusIcon self)
     filenamePtr
@@ -248,7 +248,7 @@ statusIconSetFromStock :: StatusIconClass self => self
  -> StockId -- ^ @stockId@ - a stock icon id
  -> IO ()
 statusIconSetFromStock self stockId =
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call gtk_status_icon_set_from_stock #}
     (toStatusIcon self)
     stockIdPtr
@@ -261,7 +261,7 @@ statusIconSetFromIconName :: StatusIconClass self => self
  -> String -- ^ @iconName@ - an icon name
  -> IO ()
 statusIconSetFromIconName self iconName =
-  withUTFString iconName $ \iconNamePtr ->
+  withCString iconName $ \iconNamePtr ->
   {# call gtk_status_icon_set_from_icon_name #}
     (toStatusIcon self)
     iconNamePtr
@@ -307,7 +307,7 @@ statusIconGetStock :: StatusIconClass self => self
 statusIconGetStock self =
   {# call gtk_status_icon_get_stock #}
     (toStatusIcon self)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- %hash c:6e6b d:273e | Gets the name of the icon being displayed by
 -- the 'StatusIcon'. The storage type of the status icon must be
@@ -322,7 +322,7 @@ statusIconGetIconName :: StatusIconClass self => self
 statusIconGetIconName self =
   {# call gtk_status_icon_get_icon_name #}
     (toStatusIcon self)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- %hash c:b1db d:b874
 -- | Gets the size in pixels that is available for the image. Stock icons and
@@ -344,7 +344,7 @@ statusIconSetTooltip :: StatusIconClass self => self
  -> String -- ^ @tooltipText@ - the tooltip text
  -> IO ()
 statusIconSetTooltip self tooltipText =
-  withUTFString tooltipText $ \tooltipTextPtr ->
+  withCString tooltipText $ \tooltipTextPtr ->
   {# call gtk_status_icon_set_tooltip #}
     (toStatusIcon self)
     tooltipTextPtr
@@ -463,7 +463,7 @@ statusIconGetGeometry self =
 -- for sorting the icons in the tray and will not be shown to the user.
 statusIconSetName :: StatusIconClass self => self -> String -> IO ()
 statusIconSetName self name =
-  withUTFString name $ \ namePtr -> 
+  withCString name $ \ namePtr -> 
   {#call gtk_status_icon_set_name #}
     (toStatusIcon self)
     namePtr
diff --git a/Graphics/UI/Gtk/Display/Statusbar.chs b/Graphics/UI/Gtk/Display/Statusbar.chs
index 738c972..1e73b4c 100644
--- a/Graphics/UI/Gtk/Display/Statusbar.chs
+++ b/Graphics/UI/Gtk/Display/Statusbar.chs
@@ -111,7 +111,7 @@ module Graphics.UI.Gtk.Display.Statusbar (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
@@ -144,7 +144,7 @@ statusbarGetContextId :: StatusbarClass self => self
  -> IO ContextId -- ^ returns an id that can be used to later remove entries
                  -- ^ from the Statusbar.
 statusbarGetContextId self contextDescription =
-  withUTFString contextDescription $ \contextDescriptionPtr ->
+  withCString contextDescription $ \contextDescriptionPtr ->
   {# call unsafe statusbar_get_context_id #}
     (toStatusbar self)
     contextDescriptionPtr
@@ -162,7 +162,7 @@ statusbarPush :: StatusbarClass self => self
                  -- 'statusbarRemove'.
 statusbarPush self contextId text =
   liftM MessageId $
-  withUTFString text $ \textPtr ->
+  withCString text $ \textPtr ->
   {# call statusbar_push #}
     (toStatusbar self)
     contextId
diff --git a/Graphics/UI/Gtk/Entry/Editable.chs b/Graphics/UI/Gtk/Entry/Editable.chs
index 82738a3..d81127f 100644
--- a/Graphics/UI/Gtk/Entry/Editable.chs
+++ b/Graphics/UI/Gtk/Entry/Editable.chs
@@ -89,7 +89,7 @@ module Graphics.UI.Gtk.Entry.Editable (
 import Control.Monad    (liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 {#import Graphics.UI.Gtk.Types#}
 {#import Graphics.UI.Gtk.Signals#}
@@ -144,7 +144,7 @@ editableInsertText :: EditableClass self => self
  -> IO Int -- ^ returns the position after the newly inserted text.
 editableInsertText self newText position = 
   with (fromIntegral position) $ \positionPtr ->
-  withUTFStringLen newText $ \(newTextPtr, newTextLength) -> do
+  withCStringLen newText $ \(newTextPtr, newTextLength) -> do
   {# call editable_insert_text #}
     (toEditable self)
     newTextPtr
@@ -182,7 +182,7 @@ editableGetChars self startPos endPos =
     (toEditable self)
     (fromIntegral startPos)
     (fromIntegral endPos)
-  >>= readUTFString
+  >>= readCString
 
 -- | Causes the characters in the current selection to be copied to the
 -- clipboard and then deleted from the widget.
@@ -343,8 +343,8 @@ insertText :: EditableClass self => Signal self (String -> Int -> IO Int)
 insertText = Signal $ \after obj handler ->
   connect_PTR_INT_PTR__NONE "insert-text" after obj
   (\strPtr strLen posPtr -> do
-    str <- if strLen<0 then peekUTFString strPtr
-           else peekUTFStringLen (strPtr, strLen)
+    str <- if strLen<0 then peekCString strPtr
+           else peekCStringLen (strPtr, strLen)
     pos <- peek (posPtr :: Ptr {#type gint#})
     pos' <- handler str (fromIntegral pos)
     poke (posPtr :: Ptr {#type gint#}) (fromIntegral pos')
@@ -376,8 +376,8 @@ onInsertText, afterInsertText :: EditableClass self => self
 onInsertText obj handler =
   connect_PTR_INT_PTR__NONE "insert_text" False obj
   (\strPtr strLen posPtr -> do
-    str <- if strLen<0 then peekUTFString strPtr
-           else peekUTFStringLen (strPtr, strLen)
+    str <- if strLen<0 then peekCString strPtr
+           else peekCStringLen (strPtr, strLen)
     pos <- peek (posPtr :: Ptr {#type gint#})
     pos' <- handler str (fromIntegral pos)
     poke (posPtr :: Ptr {#type gint#}) (fromIntegral pos')
@@ -385,8 +385,8 @@ onInsertText obj handler =
 afterInsertText obj handler =
   connect_PTR_INT_PTR__NONE "insert_text" True obj
   (\strPtr strLen posPtr -> do
-    str <- if strLen<0 then peekUTFString strPtr
-           else peekUTFStringLen (strPtr, strLen)
+    str <- if strLen<0 then peekCString strPtr
+           else peekCStringLen (strPtr, strLen)
     pos <- peek (posPtr :: Ptr {#type gint#})
     pos' <- handler str (fromIntegral pos)
     poke (posPtr :: Ptr {#type gint#}) (fromIntegral pos')
diff --git a/Graphics/UI/Gtk/Entry/Entry.chs b/Graphics/UI/Gtk/Entry/Entry.chs
index cd49348..465edc7 100644
--- a/Graphics/UI/Gtk/Entry/Entry.chs
+++ b/Graphics/UI/Gtk/Entry/Entry.chs
@@ -144,7 +144,7 @@ import Control.Monad.Reader (runReaderT)
 import Data.Char	(ord, chr)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GObject		(makeNewGObject)
@@ -182,7 +182,7 @@ entryNew =
 --
 entrySetText :: EntryClass self => self -> String -> IO ()
 entrySetText self text =
-  withUTFString text $ \textPtr ->
+  withCString text $ \textPtr ->
   {# call entry_set_text #}
     (toEntry self)
     textPtr
@@ -194,7 +194,7 @@ entryGetText :: EntryClass self => self -> IO String
 entryGetText self =
   {# call entry_get_text #}
     (toEntry self)
-  >>= peekUTFString
+  >>= peekCString
 
 #ifndef DISABLE_DEPRECATED
 -- | Appends the given text to the contents of the widget.
@@ -204,7 +204,7 @@ entryGetText self =
 --
 entryAppendText :: EntryClass self => self -> String -> IO ()
 entryAppendText self text =
-  withUTFString text $ \textPtr ->
+  withCString text $ \textPtr ->
   {# call entry_append_text #}
     (toEntry self)
     textPtr
@@ -216,7 +216,7 @@ entryAppendText self text =
 --
 entryPrependText :: EntryClass self => self -> String -> IO ()
 entryPrependText self text =
-  withUTFString text $ \textPtr ->
+  withCString text $ \textPtr ->
   {# call entry_prepend_text #}
     (toEntry self)
     textPtr
diff --git a/Graphics/UI/Gtk/Entry/EntryBuffer.chs b/Graphics/UI/Gtk/Entry/EntryBuffer.chs
index 9c9f139..f03060e 100644
--- a/Graphics/UI/Gtk/Entry/EntryBuffer.chs
+++ b/Graphics/UI/Gtk/Entry/EntryBuffer.chs
@@ -83,7 +83,7 @@ import Control.Monad	(liftM)
 import Data.Maybe       (fromJust)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 {#import Graphics.UI.Gtk.Types#}
@@ -106,7 +106,7 @@ entryBufferNew ::
  -> IO EntryBuffer
 entryBufferNew initialChars =
   wrapNewGObject mkEntryBuffer $
-  maybeWith withUTFString initialChars $ \initialCharsPtr -> do
+  maybeWith withCString initialChars $ \initialCharsPtr -> do
     let chars = if initialCharsPtr == nullPtr
                    then (-1)
                    else length $ fromJust initialChars
@@ -139,7 +139,7 @@ entryBufferInsertText :: EntryBufferClass self => self
  -> IO Int -- ^ returns The number of characters actually inserted.
 entryBufferInsertText self position chars =
   liftM fromIntegral $
-  withUTFStringLen chars $ \ (charsPtr, len) ->
+  withCStringLen chars $ \ (charsPtr, len) ->
   {# call gtk_entry_buffer_insert_text #}
     (toEntryBuffer self)
     (fromIntegral position)
@@ -187,7 +187,7 @@ entryBufferEmitInsertedText :: EntryBufferClass self => self
  -> Int    -- ^ @nChars@ - number of characters inserted
  -> IO ()
 entryBufferEmitInsertedText self position chars nChars =
-  withUTFString chars $ \charsPtr ->
+  withCString chars $ \charsPtr ->
   {# call gtk_entry_buffer_emit_inserted_text #}
     (toEntryBuffer self)
     (fromIntegral position)
diff --git a/Graphics/UI/Gtk/Entry/EntryCompletion.chs b/Graphics/UI/Gtk/Entry/EntryCompletion.chs
index c298bb4..50df25c 100644
--- a/Graphics/UI/Gtk/Entry/EntryCompletion.chs
+++ b/Graphics/UI/Gtk/Entry/EntryCompletion.chs
@@ -139,7 +139,7 @@ module Graphics.UI.Gtk.Entry.EntryCompletion (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.GObject		(wrapNewGObject,
 					 makeNewGObject, destroyFunPtr)
@@ -233,7 +233,7 @@ entryCompletionSetTextModel self model = do
 entryCompletionSetMatchFunc :: EntryCompletion -> (String -> TreeIter -> IO Bool) -> IO ()
 entryCompletionSetMatchFunc ec handler = do
   hPtr <- mkHandler_GtkEntryCompletionMatchFunc
-    (\_ keyPtr iterPtr _ -> do key <- peekUTFString keyPtr
+    (\_ keyPtr iterPtr _ -> do key <- peekCString keyPtr
                                iter <- peek iterPtr
                                liftM fromBool $ handler key iter)
   {# call gtk_entry_completion_set_match_func #} ec
@@ -295,7 +295,7 @@ entryCompletionInsertActionText :: EntryCompletion
  -> String          -- ^ @text@ - Text of the item to insert.
  -> IO ()
 entryCompletionInsertActionText self index text =
-  withUTFString text $ \textPtr ->
+  withCString text $ \textPtr ->
   {# call gtk_entry_completion_insert_action_text #}
     self
     (fromIntegral index)
@@ -309,7 +309,7 @@ entryCompletionInsertActionMarkup :: EntryCompletion
  -> String          -- ^ @markup@ - Markup of the item to insert.
  -> IO ()
 entryCompletionInsertActionMarkup self index markup =
-  withUTFString markup $ \markupPtr ->
+  withCString markup $ \markupPtr ->
   {# call gtk_entry_completion_insert_action_markup #}
     self
     (fromIntegral index)
diff --git a/Graphics/UI/Gtk/Gdk/AppLaunchContext.chs b/Graphics/UI/Gtk/Gdk/AppLaunchContext.chs
index d00aa18..100af83 100644
--- a/Graphics/UI/Gtk/Gdk/AppLaunchContext.chs
+++ b/Graphics/UI/Gtk/Gdk/AppLaunchContext.chs
@@ -51,7 +51,7 @@ module Graphics.UI.Gtk.Gdk.AppLaunchContext (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GObject		(wrapNewGObject)
 import Graphics.UI.Gtk.Gdk.EventM (TimeStamp)
 {#import Graphics.UI.Gtk.Types#}
@@ -114,7 +114,7 @@ appLaunchContextSetIcon self icon =
 -- GAppInfo for the launched application itself.
 appLaunchContextSetIconName :: AppLaunchContext -> String -> IO ()
 appLaunchContextSetIconName self iconName =
-  withUTFString iconName $ \iconNamePtr ->
+  withCString iconName $ \iconNamePtr ->
   {# call gdk_app_launch_context_set_icon_name #}
     self
     iconNamePtr
diff --git a/Graphics/UI/Gtk/Gdk/Cursor.chs b/Graphics/UI/Gtk/Gdk/Cursor.chs
index c46a24f..99acfa1 100644
--- a/Graphics/UI/Gtk/Gdk/Cursor.chs
+++ b/Graphics/UI/Gtk/Gdk/Cursor.chs
@@ -49,7 +49,7 @@ module Graphics.UI.Gtk.Gdk.Cursor (
 import Control.Monad (liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import Foreign.ForeignPtr (ForeignPtr, castForeignPtr, unsafeForeignPtrToPtr)
 import Graphics.UI.Gtk.General.Structs
 
@@ -134,7 +134,7 @@ cursorNewFromName ::
  -> String  -- ^ @name@ the name of the cursor                                             
  -> IO (Maybe Cursor)   -- ^ return a new 'Cursor', or @Nothing@ if there is no cursor with the given name 
 cursorNewFromName display name = 
-    withUTFString name $ \namePtr -> do
+    withCString name $ \namePtr -> do
       cursorPtr <- {#call cursor_new_from_name#} display namePtr
       if cursorPtr == nullPtr then return Nothing else liftM Just $ makeNewCursor cursorPtr
 
diff --git a/Graphics/UI/Gtk/Gdk/Display.chs b/Graphics/UI/Gtk/Gdk/Display.chs
index fb793ba..a7085a1 100644
--- a/Graphics/UI/Gtk/Gdk/Display.chs
+++ b/Graphics/UI/Gtk/Gdk/Display.chs
@@ -115,7 +115,7 @@ module Graphics.UI.Gtk.Gdk.Display (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Flags
 import System.Glib.GList
 {#import Graphics.UI.Gtk.Types#}
@@ -139,7 +139,7 @@ displayOpen ::
                -- could not be opened.
 displayOpen displayName =
   maybeNull (wrapNewGObject mkDisplay) $
-  withUTFString displayName $ \displayNamePtr ->
+  withCString displayName $ \displayNamePtr ->
   {# call gdk_display_open #}
     displayNamePtr
 
@@ -161,7 +161,7 @@ displayGetName :: Display
 displayGetName self =
   {# call gdk_display_get_name #}
     self
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Gets the number of screen managed by the @display@.
 --
diff --git a/Graphics/UI/Gtk/Gdk/Keymap.chs b/Graphics/UI/Gtk/Gdk/Keymap.chs
index 11e5370..f0a0e61 100644
--- a/Graphics/UI/Gtk/Gdk/Keymap.chs
+++ b/Graphics/UI/Gtk/Gdk/Keymap.chs
@@ -124,7 +124,7 @@ module Graphics.UI.Gtk.Gdk.Keymap (
 import Control.Monad	(liftM)
 import Data.Maybe (fromMaybe)
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import Graphics.UI.Gtk.Gdk.Enums	(Modifier(..))
 import Graphics.UI.Gtk.Gdk.Keys	(KeyVal (..))
 {#import Graphics.Rendering.Pango.Enums#}
diff --git a/Graphics/UI/Gtk/Gdk/Keys.chs b/Graphics/UI/Gtk/Gdk/Keys.chs
index c90d1d5..01f68bb 100644
--- a/Graphics/UI/Gtk/Gdk/Keys.chs
+++ b/Graphics/UI/Gtk/Gdk/Keys.chs
@@ -48,7 +48,7 @@ module Graphics.UI.Gtk.Gdk.Keys (
 import Control.Monad (liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 
 {#context lib="gdk" prefix ="gdk"#}
 
@@ -79,7 +79,7 @@ keyToChar k = unsafePerformIO $ keyvalToChar k
 keyvalName :: KeyVal -> IO String
 keyvalName keyval = do
   strPtr <- {# call gdk_keyval_name #} (fromIntegral keyval)
-  if strPtr==nullPtr then return "" else peekUTFString strPtr
+  if strPtr==nullPtr then return "" else peekCString strPtr
 
 keyvalFromName :: String -> IO KeyVal
 keyvalFromName keyvalName =
diff --git a/Graphics/UI/Gtk/Gdk/Pixbuf.chs b/Graphics/UI/Gtk/Gdk/Pixbuf.chs
index 54d6dfb..cbfd546 100644
--- a/Graphics/UI/Gtk/Gdk/Pixbuf.chs
+++ b/Graphics/UI/Gtk/Gdk/Pixbuf.chs
@@ -119,7 +119,7 @@ module Graphics.UI.Gtk.Gdk.Pixbuf (
 import Control.Monad (liftM)
 import Data.Ix
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GDateTime
 import System.Glib.GObject
 {#import Graphics.UI.Gtk.Types#}
@@ -243,10 +243,10 @@ pixbufGetRowstride pb = liftM fromIntegral $
 --   this image was saved.
 --
 pixbufGetOption :: Pixbuf -> String -> IO (Maybe String)
-pixbufGetOption pb key = withUTFString key $ \strPtr -> do
+pixbufGetOption pb key = withCString key $ \strPtr -> do
   resPtr <- {#call unsafe pixbuf_get_option#} pb strPtr
   if (resPtr==nullPtr) then return Nothing else
-    liftM Just $ peekUTFString resPtr
+    liftM Just $ peekCString resPtr
 
 -- helper functions
 pixbufErrorDomain :: GErrorDomain
@@ -268,7 +268,7 @@ pixbufNewFromFile :: FilePath -> IO Pixbuf
 pixbufNewFromFile fname =
   wrapNewGObject mkPixbuf $
   propagateGError $ \errPtrPtr ->
-     withUTFString fname $ \strPtr ->
+     withCString fname $ \strPtr ->
 #if defined (WIN32) && GTK_CHECK_VERSION(2,6,0)
      {#call unsafe pixbuf_new_from_file_utf8#}
 #else
@@ -291,7 +291,7 @@ pixbufNewFromFileAtSize :: String -> Int -> Int -> IO Pixbuf
 pixbufNewFromFileAtSize filename width height =
   wrapNewGObject mkPixbuf $
   propagateGError $ \errPtrPtr ->
-    withUTFString filename $ \filenamePtr ->
+    withCString filename $ \filenamePtr ->
 #if defined (WIN32) && GTK_CHECK_VERSION(2,6,0)
     {# call gdk_pixbuf_new_from_file_at_size_utf8 #}
 #else
@@ -329,7 +329,7 @@ pixbufNewFromFileAtScale ::
 pixbufNewFromFileAtScale filename width height preserveAspectRatio =
   wrapNewGObject mkPixbuf $
   propagateGError $ \errPtrPtr ->
-    withUTFString filename $ \filenamePtr ->
+    withCString filename $ \filenamePtr ->
 #if defined (WIN32) && GTK_CHECK_VERSION(2,6,0)
     {# call gdk_pixbuf_new_from_file_at_scale_utf8 #}
 #else
@@ -373,10 +373,10 @@ pixbufSave pb fname iType options =
   let (keys, values) = unzip options in
   let optLen = length keys in
   propagateGError $ \errPtrPtr ->
-    withUTFString fname $ \fnPtr ->
-    withUTFString iType $ \tyPtr ->
-    withUTFStringArray0 keys $ \keysPtr ->
-    withUTFStringArray values $ \valuesPtr -> do
+    withCString fname $ \fnPtr ->
+    withCString iType $ \tyPtr ->
+    withCStringArray0 keys $ \keysPtr ->
+    withCStringArray values $ \valuesPtr -> do
 #if defined (WIN32) && GTK_CHECK_VERSION(2,6,5)
       {# call unsafe pixbuf_savev_utf8 #}
 #else
@@ -408,7 +408,7 @@ pixbufNew colorspace hasAlpha bitsPerSample width height =
 --
 pixbufNewFromXPMData :: [String] -> IO Pixbuf
 pixbufNewFromXPMData s =
-  withUTFStringArray0 s $ \strsPtr ->
+  withCStringArray0 s $ \strsPtr ->
     wrapNewGObject mkPixbuf $ {#call pixbuf_new_from_xpm_data#} strsPtr
 
 -- | A dymmy type for inline picture data.
diff --git a/Graphics/UI/Gtk/Gdk/PixbufAnimation.chs b/Graphics/UI/Gtk/Gdk/PixbufAnimation.chs
index 4463d09..3bb4c84 100644
--- a/Graphics/UI/Gtk/Gdk/PixbufAnimation.chs
+++ b/Graphics/UI/Gtk/Gdk/PixbufAnimation.chs
@@ -76,7 +76,7 @@ module Graphics.UI.Gtk.Gdk.PixbufAnimation (
 
 import Control.Monad (liftM)
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GDateTime
 import System.Glib.GObject
 {#import Graphics.UI.Gtk.Types#}
@@ -108,7 +108,7 @@ pixbufAnimationNewFromFile :: FilePath               -- ^ Name of file to load,
 pixbufAnimationNewFromFile fname =
   wrapNewGObject mkPixbufAnimation $
   propagateGError $ \errPtrPtr ->
-     withUTFString fname $ \strPtr ->
+     withCString fname $ \strPtr ->
 #if defined (WIN32) && GTK_CHECK_VERSION(2,6,5)
      {#call unsafe pixbuf_animation_new_from_file_utf8#} strPtr errPtrPtr
 #else
diff --git a/Graphics/UI/Gtk/Gdk/Screen.chs b/Graphics/UI/Gtk/Gdk/Screen.chs
index 0789edc..d07a524 100644
--- a/Graphics/UI/Gtk/Gdk/Screen.chs
+++ b/Graphics/UI/Gtk/Gdk/Screen.chs
@@ -117,7 +117,7 @@ module Graphics.UI.Gtk.Gdk.Screen (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Signals
 import System.Glib.Attributes
 import System.Glib.Properties
@@ -325,7 +325,7 @@ screenMakeDisplayName :: Screen
 screenMakeDisplayName self =
   {# call gdk_screen_make_display_name #}
     self
-  >>= readUTFString
+  >>= readCString
 
 -- | Returns the number of monitors which @screen@ consists of.
 --
@@ -423,7 +423,7 @@ screenGetMonitorPlugName self monitorNum = do
     {# call gdk_screen_get_monitor_plug_name #}
     self
     (fromIntegral monitorNum)
-  if sPtr==nullPtr then return Nothing else liftM Just $ readUTFString sPtr
+  if sPtr==nullPtr then return Nothing else liftM Just $ readCString sPtr
 #endif
 
 {-
@@ -439,7 +439,7 @@ screenGetSetting :: Screen
                 -- stored in @value@, @False@ otherwise.
 screenGetSetting self name value =
   liftM toBool $
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call gdk_screen_get_setting #}
     self
     namePtr
diff --git a/Graphics/UI/Gtk/General/Clipboard.chs b/Graphics/UI/Gtk/General/Clipboard.chs
index 0d51364..fc19048 100644
--- a/Graphics/UI/Gtk/General/Clipboard.chs
+++ b/Graphics/UI/Gtk/General/Clipboard.chs
@@ -136,7 +136,7 @@ module Graphics.UI.Gtk.General.Clipboard (
   ) where
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 {#import Graphics.UI.Gtk.Types#}
 {#import Graphics.UI.Gtk.General.DNDTypes#} (SelectionTag, TargetTag,
   atomNew, Atom(..))
@@ -365,7 +365,7 @@ clipboardSetText :: ClipboardClass self => self
  -> String -- ^ @text@ - the text to be set as clipboard content
  -> IO ()
 clipboardSetText self text =
-  withUTFStringLen text $ \(textPtr,len) ->
+  withCStringLen text $ \(textPtr,len) ->
   {# call gtk_clipboard_set_text #}
     (toClipboard self)
     textPtr
@@ -442,7 +442,7 @@ clipboardRequestText self callback = do
     (\_ sPtr -> do
       freeHaskellFunPtr =<< readIORef cbRef
       mStr <- if sPtr==nullPtr then return Nothing else
-        liftM Just $ peekUTFString sPtr
+        liftM Just $ peekCString sPtr
       callback mStr)
   writeIORef cbRef cbPtr
   {# call gtk_clipboard_request_text #}
@@ -555,7 +555,7 @@ clipboardRequestRichText self buffer callback = do
     (\_ tPtr sPtr len -> do
       freeHaskellFunPtr =<< readIORef cbRef
       mRes <- if sPtr==nullPtr then return Nothing else liftM Just $ do
-        str <- peekUTFStringLen (sPtr,fromIntegral len)
+        str <- peekCStringLen (sPtr,fromIntegral len)
         return (Atom tPtr, str)
       callback mRes)
   writeIORef cbRef cbPtr
diff --git a/Graphics/UI/Gtk/General/DNDTypes.chs b/Graphics/UI/Gtk/General/DNDTypes.chs
index 1a2ddb6..4c41e8b 100644
--- a/Graphics/UI/Gtk/General/DNDTypes.chs
+++ b/Graphics/UI/Gtk/General/DNDTypes.chs
@@ -45,7 +45,7 @@ module Graphics.UI.Gtk.General.DNDTypes (
 
 import System.Glib.FFI
 {#import Graphics.UI.Gtk.Types#} ()
-import System.Glib.UTFString ( readUTFString, withUTFString )
+import System.Glib.CString ( readCString, withCString )
 import Control.Monad ( liftM )
 import Control.Monad.Reader ( ReaderT )
 
@@ -93,7 +93,7 @@ instance Show Atom where
 
 atomToString ptr = unsafePerformIO $ do
 	strPtr <- {#call unsafe gdk_atom_name#} ptr
-	readUTFString strPtr
+	readCString strPtr
 
 -- | A 'TargetList' contains information about all possible formats
 -- (represented as 'TargetTag') that a widget can create or receive in form of
@@ -112,7 +112,7 @@ atomToString ptr = unsafePerformIO $ do
 --   by 'show' though comparing the atom is merely an integer comparison.
 --
 atomNew :: String -> IO Atom
-atomNew name = withUTFString name $ \strPtr ->
+atomNew name = withCString name $ \strPtr ->
   liftM Atom $ {#call unsafe gdk_atom_intern#} strPtr 0
 
 -- | Create a new, empty 'TargetList'.
diff --git a/Graphics/UI/Gtk/General/Drag.chs b/Graphics/UI/Gtk/General/Drag.chs
index ed23e03..4e7081b 100644
--- a/Graphics/UI/Gtk/General/Drag.chs
+++ b/Graphics/UI/Gtk/General/Drag.chs
@@ -134,7 +134,7 @@ import Control.Monad	(liftM)
 
 import System.Glib.FFI
 import System.Glib.Flags
-import System.Glib.UTFString ( withUTFString )
+import System.Glib.CString ( withCString )
 import System.Glib.GObject		(makeNewGObject)
 import System.Glib.Attributes ( Attr, newAttr )
 import Graphics.UI.Gtk.General.StockItems ( StockId )
@@ -423,7 +423,7 @@ dragSetIconStock :: DragContextClass context => context -> StockId
   -> Int -- ^ y hot-spot
   -> IO ()
 dragSetIconStock context stockId hotX hotY =
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call gtk_drag_set_icon_stock #}
     (toDragContext context)
     stockIdPtr
@@ -443,7 +443,7 @@ dragSetIconName :: DragContextClass context => context
   -> Int -- ^ y hot-spot
   -> IO ()
 dragSetIconName context iconName hotX hotY =
-  withUTFString iconName $ \iconNamePtr ->
+  withCString iconName $ \iconNamePtr ->
   {# call gtk_drag_set_icon_name #}
     (toDragContext context)
     iconNamePtr
@@ -510,7 +510,7 @@ dragSourceSetIconPixbuf widget pixbuf =
 --
 dragSourceSetIconStock :: WidgetClass widget => widget -> StockId -> IO ()
 dragSourceSetIconStock widget stockId =
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call gtk_drag_source_set_icon_stock #}
     (toWidget widget)
     stockIdPtr
@@ -522,7 +522,7 @@ dragSourceSetIconStock widget stockId =
 --
 dragSourceSetIconName :: WidgetClass widget => widget -> String -> IO ()
 dragSourceSetIconName widget iconName =
-  withUTFString iconName $ \iconNamePtr ->
+  withCString iconName $ \iconNamePtr ->
   {# call gtk_drag_source_set_icon_name #}
     (toWidget widget)
     iconNamePtr
diff --git a/Graphics/UI/Gtk/General/General.chs b/Graphics/UI/Gtk/General/General.chs
index 5b4691e..26fc1b9 100644
--- a/Graphics/UI/Gtk/General/General.chs
+++ b/Graphics/UI/Gtk/General/General.chs
@@ -84,7 +84,7 @@ import Control.Concurrent (rtsSupportsBoundThreads, newEmptyMVar,
 import Data.IORef         (IORef, newIORef, readIORef, writeIORef)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import qualified System.Glib.MainLoop as ML
 import System.Glib.MainLoop ( Priority, priorityLow, priorityDefaultIdle,
   priorityHighIdle, priorityDefault, priorityHigh, timeoutRemove, idleRemove,
@@ -105,7 +105,7 @@ import Control.Monad.Trans (liftIO)
 --getDefaultLanguage :: IO String
 --getDefaultLanguage = do
 --  strPtr <- {#call unsafe get_default_language#}
---  str <- peekUTFString strPtr
+--  str <- peekCString strPtr
 --  destruct strPtr
 --  return str
 -}
@@ -144,7 +144,7 @@ initGUI = do
   prog <- getProgName
   args <- getArgs
   let allArgs = (prog:args)
-  withMany withUTFString allArgs $ \addrs  ->
+  withMany withCString allArgs $ \addrs  ->
     withArrayLen       addrs   $ \argc argv ->
     with	       argv    $ \argvp ->
     with	       argc    $ \argcp -> do 
@@ -153,7 +153,7 @@ initGUI = do
         argc'   <- peek argcp
         argv'   <- peek argvp
         _:addrs'  <- peekArray argc' argv'  -- drop the program name
-        mapM peekUTFString addrs'
+        mapM peekCString addrs'
         else error "Cannot initialize GUI."
 
 -- g_thread_init aborts the whole program if it's called more than once so
diff --git a/Graphics/UI/Gtk/General/IconFactory.chs b/Graphics/UI/Gtk/General/IconFactory.chs
index 1caa121..86b0bda 100644
--- a/Graphics/UI/Gtk/General/IconFactory.chs
+++ b/Graphics/UI/Gtk/General/IconFactory.chs
@@ -106,7 +106,7 @@ module Graphics.UI.Gtk.General.IconFactory (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GObject		(wrapNewGObject, makeNewGObject)
 {#import Graphics.UI.Gtk.Types#}
 import Graphics.UI.Gtk.General.Enums	(TextDirection(..), StateType(..))
@@ -125,7 +125,7 @@ instance Show IconSize where
     where
     lookupSizeString n = do
       ptr <- {#call unsafe icon_size_get_name#} (fromIntegral n)
-      if ptr==nullPtr then return "" else peekUTFString ptr
+      if ptr==nullPtr then return "" else peekCString ptr
 
 --------------------
 -- Constructors
@@ -152,7 +152,7 @@ iconFactoryNew  =
 -- default factories by 'iconFactoryAddDefault'.
 --
 iconFactoryAdd :: IconFactory -> StockId -> IconSet -> IO ()
-iconFactoryAdd i stockId iconSet = withUTFString stockId $ \strPtr ->
+iconFactoryAdd i stockId iconSet = withCString stockId $ \strPtr ->
   {#call unsafe icon_factory_add#} i strPtr iconSet
 
 -- | Add all entries of the IconFactory to the
@@ -172,7 +172,7 @@ iconFactoryAddDefault  = {#call unsafe icon_factory_add_default#}
 --
 iconFactoryLookup :: IconFactory -> StockId -> IO (Maybe IconSet)
 iconFactoryLookup i stockId =
-  withUTFString stockId $ \strPtr -> do
+  withCString stockId $ \strPtr -> do
   iconSetPtr <- {#call unsafe icon_factory_lookup#} i strPtr
   if iconSetPtr == nullPtr then return Nothing else liftM (Just . IconSet) $
     newForeignPtr iconSetPtr icon_set_unref
@@ -187,7 +187,7 @@ iconFactoryLookup i stockId =
 --
 iconFactoryLookupDefault :: StockId -> IO (Maybe IconSet)
 iconFactoryLookupDefault stockId =
-  withUTFString stockId $ \strPtr -> do
+  withCString stockId $ \strPtr -> do
   iconSetPtr <- {#call unsafe icon_factory_lookup_default#} strPtr
   if iconSetPtr == nullPtr then return Nothing else liftM (Just . IconSet) $
     newForeignPtr iconSetPtr icon_set_unref
@@ -274,13 +274,13 @@ iconSizeRegister ::
   -> Int -- ^ the height of the icon
   -> IO IconSize -- ^ the new icon size
 iconSizeRegister name width height = liftM (toEnum . fromIntegral) $
-  withUTFString name $ \strPtr -> {#call unsafe icon_size_register#} 
+  withCString name $ \strPtr -> {#call unsafe icon_size_register#} 
   strPtr (fromIntegral width) (fromIntegral height)
 
 -- | Register an additional alias for a name.
 --
 iconSizeRegisterAlias :: IconSize -> String -> IO ()
-iconSizeRegisterAlias target alias = withUTFString alias $ \strPtr ->
+iconSizeRegisterAlias target alias = withCString alias $ \strPtr ->
   {#call unsafe icon_size_register_alias#} strPtr ((fromIntegral . fromEnum) target)
 
 -- | Lookup an IconSize by name.
@@ -290,7 +290,7 @@ iconSizeRegisterAlias target alias = withUTFString alias $ \strPtr ->
 --
 iconSizeFromName :: String -> IO IconSize
 iconSizeFromName name = liftM (toEnum . fromIntegral) $
-  withUTFString name {#call unsafe icon_size_from_name#}
+  withCString name {#call unsafe icon_size_from_name#}
 
 -- | Lookup the name of an IconSize.
 --
@@ -299,7 +299,7 @@ iconSizeFromName name = liftM (toEnum . fromIntegral) $
 iconSizeGetName :: IconSize -> IO (Maybe String)
 iconSizeGetName size = do
   strPtr <- {#call unsafe icon_size_get_name#} ((fromIntegral . fromEnum) size)
-  if strPtr==nullPtr then return Nothing else liftM Just $ peekUTFString strPtr
+  if strPtr==nullPtr then return Nothing else liftM Just $ peekCString strPtr
 
 -- | Retrieve the 'TextDirection' of
 -- this IconSource.
@@ -324,7 +324,7 @@ iconSourceGetFilename is = do
 #else
   strPtr <- {#call unsafe icon_source_get_filename#} is
 #endif
-  if strPtr==nullPtr then return Nothing else liftM Just $ peekUTFString strPtr
+  if strPtr==nullPtr then return Nothing else liftM Just $ peekCString strPtr
 
 -- | Retrieve the 'IconSize' of this
 -- IconSource.
@@ -384,9 +384,9 @@ iconSourceResetDirection is =
 iconSourceSetFilename :: IconSource -> FilePath -> IO ()
 iconSourceSetFilename is name = 
 #if defined (WIN32) && GTK_CHECK_VERSION(2,6,0) 
-  withUTFString name $ {# call unsafe icon_source_set_filename_utf8 #} is
+  withCString name $ {# call unsafe icon_source_set_filename_utf8 #} is
 #else
-  withUTFString name $ {# call unsafe icon_source_set_filename #} is
+  withCString name $ {# call unsafe icon_source_set_filename #} is
 #endif
 
 -- | Retrieves the source pixbuf, or Nothing if none is set.
diff --git a/Graphics/UI/Gtk/General/IconTheme.chs b/Graphics/UI/Gtk/General/IconTheme.chs
index 03b7eb5..dc6a2ce 100644
--- a/Graphics/UI/Gtk/General/IconTheme.chs
+++ b/Graphics/UI/Gtk/General/IconTheme.chs
@@ -144,7 +144,7 @@ import Control.Monad	(liftM)
 import System.Glib.FFI
 import System.Glib.Attributes
 import System.Glib.Properties
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GList
 import System.Glib.Flags
 import System.Glib.GObject		(wrapNewGObject, makeNewGObject, Quark)
@@ -238,7 +238,7 @@ iconThemeSetSearchPath :: IconThemeClass self => self
  -> Int    -- ^ @nElements@ - number of elements in @path@.
  -> IO ()
 iconThemeSetSearchPath self path nElements =
-  withUTFStringArray path $ \pathPtr ->
+  withCStringArray path $ \pathPtr ->
   {# call gtk_icon_theme_set_search_path #}
     (toIconTheme self)
     pathPtr
@@ -257,7 +257,7 @@ iconThemeGetSearchPath self =
     (toIconTheme self)
     (castPtr pathPtr)
     nElementsPtr
-  pathStr <- readUTFStringArray0 pathPtr
+  pathStr <- readCStringArray0 pathPtr
   nElements <- peek nElementsPtr
   return (pathStr, fromIntegral nElements)
 
@@ -267,7 +267,7 @@ iconThemeAppendSearchPath :: IconThemeClass self => self
  -> FilePath -- ^ @path@ - directory name to append to the icon path
  -> IO ()
 iconThemeAppendSearchPath self path =
-  withUTFString path $ \pathPtr ->
+  withCString path $ \pathPtr ->
   {# call gtk_icon_theme_append_search_path #}
     (toIconTheme self)
     pathPtr
@@ -278,7 +278,7 @@ iconThemePrependSearchPath :: IconThemeClass self => self
  -> FilePath -- ^ @path@ - directory name to prepend to the icon path
  -> IO ()
 iconThemePrependSearchPath self path =
-  withUTFString path $ \pathPtr ->
+  withCString path $ \pathPtr ->
   {# call gtk_icon_theme_prepend_search_path #}
     (toIconTheme self)
     pathPtr
@@ -292,7 +292,7 @@ iconThemeSetCustomTheme :: IconThemeClass self => self
  -> (Maybe String) -- ^ @themeName@ name of icon theme to use instead of configured theme, or 'Nothing' to unset a previously set custom theme
  -> IO ()
 iconThemeSetCustomTheme self themeName =
-  maybeWith withUTFString themeName $ \themeNamePtr ->
+  maybeWith withCString themeName $ \themeNamePtr ->
   {# call gtk_icon_theme_set_custom_theme #}
     (toIconTheme self)
     themeNamePtr
@@ -305,7 +305,7 @@ iconThemeHasIcon :: IconThemeClass self => self
             -- @iconName@.
 iconThemeHasIcon self iconName =
   liftM toBool $
-  withUTFString iconName $ \iconNamePtr ->
+  withCString iconName $ \iconNamePtr ->
   {# call gtk_icon_theme_has_icon #}
     (toIconTheme self)
     iconNamePtr
@@ -324,7 +324,7 @@ iconThemeLookupIcon :: IconThemeClass self => self
                         -- structure containing information about the icon, or
                          -- 'Nothing' if the icon wasn't found. 
 iconThemeLookupIcon self iconName size flags =
-  withUTFString iconName $ \iconNamePtr -> do
+  withCString iconName $ \iconNamePtr -> do
   iiPtr <- {# call gtk_icon_theme_lookup_icon #}
           (toIconTheme self)
           iconNamePtr
@@ -354,7 +354,7 @@ iconThemeChooseIcon :: IconThemeClass self => self
                         -- structure containing information about the icon, or
                          -- 'Nothing' if the icon wasn't found. 
 iconThemeChooseIcon self iconNames size flags =
-  withUTFStringArray0 iconNames $ \iconNamesPtr -> do
+  withCStringArray0 iconNames $ \iconNamesPtr -> do
   iiPtr <- {# call gtk_icon_theme_choose_icon #}
           (toIconTheme self)
           iconNamesPtr
@@ -418,7 +418,7 @@ iconThemeLoadIcon :: IconThemeClass self => self
 iconThemeLoadIcon self iconName size flags =
   maybeNull (wrapNewGObject mkPixbuf) $
   propagateGError $ \errorPtr ->
-  withUTFString iconName $ \iconNamePtr ->
+  withCString iconName $ \iconNamePtr ->
   {# call gtk_icon_theme_load_icon #}
     (toIconTheme self)
     iconNamePtr
@@ -439,7 +439,7 @@ iconThemeListContexts :: IconThemeClass self => self
 iconThemeListContexts self = do
   glistPtr <- {# call gtk_icon_theme_list_contexts #} (toIconTheme self)
   list <- fromGList glistPtr
-  result <- mapM readUTFString list       
+  result <- mapM readCString list       
   {#call unsafe g_list_free #} (castPtr glistPtr)
   return result
 #endif
@@ -454,12 +454,12 @@ iconThemeListIcons :: IconThemeClass self => self
  -> IO [String] -- ^ returns a String list
                -- holding the names of all the icons in the theme.
 iconThemeListIcons self context =
-  maybeWith withUTFString context $ \contextPtr -> do
+  maybeWith withCString context $ \contextPtr -> do
   glistPtr <- {# call gtk_icon_theme_list_icons #}
              (toIconTheme self)
              contextPtr
   list <- fromGList glistPtr
-  result <- mapM readUTFString list       
+  result <- mapM readCString list       
   {#call unsafe g_list_free#} (castPtr glistPtr)
   return result
 
@@ -475,7 +475,7 @@ iconThemeGetIconSizes :: IconThemeClass self => self
  -> IO [Int] -- ^ returns An newly allocated list describing the sizes at
             -- which the icon is available. 
 iconThemeGetIconSizes self iconName =
-  withUTFString iconName $ \iconNamePtr -> do
+  withCString iconName $ \iconNamePtr -> do
   listPtr <- {# call gtk_icon_theme_get_icon_sizes #}
               (toIconTheme self)
               iconNamePtr
@@ -493,7 +493,7 @@ iconThemeGetExampleIconName self = do
   namePtr <- {# call gtk_icon_theme_get_example_icon_name #} (toIconTheme self)
   if namePtr == nullPtr
      then return Nothing
-     else liftM Just $ readUTFString namePtr
+     else liftM Just $ readCString namePtr
 
 -- | Checks to see if the icon theme has changed; if it has, any currently
 -- cached information is discarded and will be reloaded next time @iconTheme@
@@ -527,7 +527,7 @@ iconThemeAddBuiltinIcon ::
            -- @iconName@.
  -> IO ()
 iconThemeAddBuiltinIcon iconName size pixbuf =
-  withUTFString iconName $ \iconNamePtr ->
+  withCString iconName $ \iconNamePtr ->
   {# call gtk_icon_theme_add_builtin_icon #}
     iconNamePtr
     (fromIntegral size)
@@ -623,7 +623,7 @@ iconInfoGetDisplayName self = do
   strPtr <- {# call gtk_icon_info_get_display_name #} self
   if strPtr == nullPtr 
      then return Nothing
-     else liftM Just $ peekUTFString strPtr
+     else liftM Just $ peekCString strPtr
 
 -- | Gets the coordinates of a rectangle within the icon that can be used for display of information such
 -- as a preview of the contents of a text file. See 'iconInfoSetRawCoordinates' for further
@@ -651,7 +651,7 @@ iconInfoGetFilename self = do
   namePtr <- {# call gtk_icon_info_get_filename #} self
   if namePtr == nullPtr
      then return Nothing 
-     else liftM Just $ peekUTFString namePtr
+     else liftM Just $ peekCString namePtr
 
 -- | Looks up an icon in an icon theme, scales it to the given size and renders it into a pixbuf. This is
 -- a convenience function; if more details about the icon are needed, use 'iconThemeLookupIcon'
diff --git a/Graphics/UI/Gtk/General/RcStyle.chs b/Graphics/UI/Gtk/General/RcStyle.chs
index 7277529..ec1694a 100644
--- a/Graphics/UI/Gtk/General/RcStyle.chs
+++ b/Graphics/UI/Gtk/General/RcStyle.chs
@@ -458,7 +458,7 @@ module Graphics.UI.Gtk.General.RcStyle (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GType (GType)
 import System.Glib.GTypeConstants (none)
 {#import Graphics.UI.Gtk.Types#}
@@ -496,7 +496,7 @@ rcStyleCopy self =
 --
 rcAddDefaultFile :: String -> IO ()
 rcAddDefaultFile filename =
-  withUTFString filename $ \filenamePtr ->
+  withCString filename $ \filenamePtr ->
   {# call gtk_rc_add_default_file #}
     filenamePtr
 
@@ -507,7 +507,7 @@ rcGetDefaultFiles :: IO [String]
 rcGetDefaultFiles = do
   aPtr <- {# call gtk_rc_get_default_files #}
   sPtrs <- peekArray0 nullPtr (castPtr aPtr)
-  mapM peekUTFString sPtrs
+  mapM peekCString sPtrs
 
 -- | Obtains the path to the IM modules file. See the documentation of the
 -- @GTK_IM_MODULE_FILE@ environment variable for more details.
@@ -515,14 +515,14 @@ rcGetDefaultFiles = do
 rcGetImModuleFile :: IO String
 rcGetImModuleFile =
   {# call gtk_rc_get_im_module_file #}
-  >>= readUTFString
+  >>= readCString
 
 -- | Returns a directory in which GTK+ looks for theme engines.
 --
 rcGetModuleDir :: IO String
 rcGetModuleDir =
   {# call gtk_rc_get_module_dir #}
-  >>= readUTFString
+  >>= readCString
 
 -- | Finds all matching RC styles for a given widget, composites them
 -- together, and then creates a GtkStyle representing the composite
@@ -554,10 +554,10 @@ rcGetStyleByPaths :: Settings
 rcGetStyleByPaths settings mWidgetPath mClassPath type_ =
   makeNewGObject mkStyle $
   (case mClassPath of
-    Just classPath -> withUTFString classPath
+    Just classPath -> withCString classPath
     Nothing -> (\act -> act nullPtr)) $ \classPathPtr ->
   (case mWidgetPath of
-    Just widgetPath -> withUTFString widgetPath
+    Just widgetPath -> withCString widgetPath
     Nothing -> (\act -> act nullPtr)) $ \widgetPathPtr ->
   {# call gtk_rc_get_style_by_paths #}
     settings
@@ -571,7 +571,7 @@ rcGetStyleByPaths settings mWidgetPath mClassPath type_ =
 rcGetThemeDir :: IO String
 rcGetThemeDir =
   {# call gtk_rc_get_theme_dir #}
-  >>= readUTFString
+  >>= readCString
 
 -- | Parses a given resource file.
 --
@@ -580,7 +580,7 @@ rcParse :: String
   -- absolute, it is searched in the current directory.
     -> IO ()
 rcParse filename =
-  withUTFString filename $ \filenamePtr ->
+  withCString filename $ \filenamePtr ->
   {# call gtk_rc_parse #}
     filenamePtr
 
@@ -588,7 +588,7 @@ rcParse filename =
 --
 rcParseString :: String -> IO ()
 rcParseString rcString =
-  withUTFString rcString $ \rcStringPtr ->
+  withCString rcString $ \rcStringPtr ->
   {# call gtk_rc_parse_string #}
     rcStringPtr
 
@@ -632,5 +632,5 @@ rcResetStyles settings =
 --
 rcSetDefaultFiles :: [String] -> IO ()
 rcSetDefaultFiles files =
-  withUTFStringArray0 files $ \ssPtr ->
+  withCStringArray0 files $ \ssPtr ->
   {# call gtk_rc_set_default_files #} ssPtr
diff --git a/Graphics/UI/Gtk/General/Selection.chs b/Graphics/UI/Gtk/General/Selection.chs
index f2f46f1..8b0bbac 100644
--- a/Graphics/UI/Gtk/General/Selection.chs
+++ b/Graphics/UI/Gtk/General/Selection.chs
@@ -112,8 +112,8 @@ import Graphics.UI.Gtk.General.Structs (
   selectionDataGetType)
 
 import Graphics.UI.Gtk.Signals
-import System.Glib.UTFString ( peekUTFString, withUTFStringLen,
-                               withUTFStringArray0, peekUTFStringArray0 )
+import System.Glib.CString ( peekCString, withCStringLen,
+                               withCStringArray0, peekCStringArray0 )
 import Control.Monad ( liftM )
 import Control.Monad.Trans ( liftIO )
 import Control.Monad.Reader (runReaderT, ask)
@@ -303,7 +303,7 @@ selectionDataIsValid = do
 selectionDataSetText :: String -> SelectionDataM Bool
 selectionDataSetText str = do
   selPtr <- ask
-  liftM toBool $ liftIO $ withUTFStringLen str $ \(strPtr,len) ->
+  liftM toBool $ liftIO $ withCStringLen str $ \(strPtr,len) ->
     {#call unsafe gtk_selection_data_set_text #} selPtr strPtr (fromIntegral len)
 
 -- %hash c:90e0 d:af3f
@@ -315,7 +315,7 @@ selectionDataGetText = do
   liftIO $ do
     strPtr <- {#call unsafe gtk_selection_data_get_text #} selPtr
     if strPtr==nullPtr then return Nothing else do
-      str <- peekUTFString (castPtr strPtr)
+      str <- peekCString (castPtr strPtr)
       {#call unsafe g_free#} (castPtr strPtr)
       return (Just str)
 
@@ -352,7 +352,7 @@ selectionDataGetPixbuf = do
 selectionDataSetURIs :: [String] -> SelectionDataM Bool
 selectionDataSetURIs uris = do
   selPtr <- ask
-  liftIO $ liftM toBool $ withUTFStringArray0 uris $ \strPtrPtr ->
+  liftIO $ liftM toBool $ withCStringArray0 uris $ \strPtrPtr ->
       {#call unsafe gtk_selection_data_set_uris #} selPtr strPtrPtr
     
 -- %hash c:472f d:af3f
@@ -367,7 +367,7 @@ selectionDataGetURIs = do
   liftIO $ do
     strPtrPtr <- {#call unsafe gtk_selection_data_get_uris #} selPtr
     if strPtrPtr==nullPtr then return Nothing else do
-      uris <- peekUTFStringArray0 strPtrPtr
+      uris <- peekCStringArray0 strPtrPtr
       {#call unsafe g_strfreev#} strPtrPtr
       return (Just uris)
 #endif
diff --git a/Graphics/UI/Gtk/General/StockItems.hsc b/Graphics/UI/Gtk/General/StockItems.hsc
index 65da431..c3135d1 100644
--- a/Graphics/UI/Gtk/General/StockItems.hsc
+++ b/Graphics/UI/Gtk/General/StockItems.hsc
@@ -176,7 +176,7 @@ module Graphics.UI.Gtk.General.StockItems (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Flags
 import System.Glib.GList	(GSList, fromGSListRev)
 import Graphics.UI.Gtk.Gdk.Events	(Modifier)
@@ -214,16 +214,16 @@ instance Storable StockItem where
 			    <- #{peek GtkStockItem, keyval} siPtr
     (transDom	:: CString) <- #{peek GtkStockItem, translation_domain} siPtr
     return $ StockItem {
-      siStockId  = unsafePerformIO $ peekUTFString' stockId,
-      siLabel	 = unsafePerformIO $ peekUTFString' label,
+      siStockId  = unsafePerformIO $ peekCString' stockId,
+      siLabel	 = unsafePerformIO $ peekCString' label,
       -- &%!?$ c2hs and hsc should agree on types
       siModifier = toFlags (fromIntegral modifier), 
       siKeyval	 = keyval,
-      siTransDom = unsafePerformIO $ peekUTFString' transDom }
+      siTransDom = unsafePerformIO $ peekCString' transDom }
     where
-      peekUTFString' :: CString -> IO String
-      peekUTFString' strPtr | strPtr==nullPtr = return ""
-			  | otherwise	    = peekUTFString strPtr
+      peekCString' :: CString -> IO String
+      peekCString' strPtr | strPtr==nullPtr = return ""
+			  | otherwise	    = peekCString strPtr
 
   poke siPtr (StockItem {
     siStockId = stockId,
@@ -231,14 +231,14 @@ instance Storable StockItem where
     siModifier= modifier,
     siKeyval  = keyval,
     siTransDom= transDom }) = do
-    stockIdPtr <- newUTFString stockId
+    stockIdPtr <- newCString stockId
     #{poke GtkStockItem, stock_id} siPtr stockIdPtr
-    labelPtr   <- newUTFString label
+    labelPtr   <- newCString label
     #{poke GtkStockItem, label}	   siPtr labelPtr
     #{poke GtkStockItem, modifier} siPtr 
       ((fromIntegral (fromFlags modifier))::#{gtk2hs_type GdkModifierType})
     #{poke GtkStockItem, keyval}   siPtr ((fromIntegral keyval)::#{gtk2hs_type guint})
-    transDomPtr<- newUTFString transDom
+    transDomPtr<- newCString transDom
     #{poke GtkStockItem, translation_domain} siPtr transDomPtr
 
 
@@ -260,7 +260,7 @@ stockAddItem sis = let items = length sis in do
 stockLookupItem :: StockId -> IO (Maybe StockItem)
 stockLookupItem stockId = 
   alloca $ \siPtr ->
-  withUTFString stockId $ \strPtr -> do
+  withCString stockId $ \strPtr -> do
   res <- stock_lookup strPtr siPtr
   if (toBool res) then liftM Just $ peek siPtr else return Nothing
 
@@ -276,7 +276,7 @@ stockListIds :: IO [StockId]
 stockListIds = do
   lPtr <- stock_list_ids
   sPtrs <- fromGSListRev lPtr
-  res <- mapM readUTFString sPtrs
+  res <- mapM readCString sPtrs
   return res
 
 foreign import ccall unsafe "gtk_stock_add"
diff --git a/Graphics/UI/Gtk/General/Structs.hsc b/Graphics/UI/Gtk/General/Structs.hsc
index 2df0385..d3728d5 100644
--- a/Graphics/UI/Gtk/General/Structs.hsc
+++ b/Graphics/UI/Gtk/General/Structs.hsc
@@ -113,7 +113,7 @@ import Control.Exception
 #endif
 
 import System.Glib.FFI
-import System.Glib.UTFString ( UTFCorrection, ofsToUTF )
+import System.Glib.CString ( UTFCorrection, ofsToUTF )
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 import System.Glib.GObject		(makeNewGObject)
 import Graphics.UI.Gtk.Types
diff --git a/Graphics/UI/Gtk/Layout/Expander.chs b/Graphics/UI/Gtk/Layout/Expander.chs
index 65e5273..6724f86 100644
--- a/Graphics/UI/Gtk/Layout/Expander.chs
+++ b/Graphics/UI/Gtk/Layout/Expander.chs
@@ -95,7 +95,7 @@ module Graphics.UI.Gtk.Layout.Expander (
 import Control.Monad (liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object
@@ -114,7 +114,7 @@ expanderNew :: String -> IO Expander
 expanderNew label =
   makeNewObject mkExpander $
   liftM (castPtr :: Ptr Widget -> Ptr Expander) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call gtk_expander_new #}
     labelPtr
 
@@ -132,7 +132,7 @@ expanderNewWithMnemonic ::
 expanderNewWithMnemonic label =
   makeNewObject mkExpander $
   liftM (castPtr :: Ptr Widget -> Ptr Expander) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call gtk_expander_new_with_mnemonic #}
     labelPtr
 
@@ -184,7 +184,7 @@ expanderGetSpacing self =
 --
 expanderSetLabel :: Expander -> String -> IO ()
 expanderSetLabel self label =
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call gtk_expander_set_label #}
     self
     labelPtr
@@ -196,7 +196,7 @@ expanderGetLabel :: Expander -> IO String
 expanderGetLabel self =
   {# call gtk_expander_get_label #}
     self
-  >>= peekUTFString
+  >>= peekCString
 
 -- | If true, an underline in the text of the expander label indicates the
 -- next character should be used for the mnemonic accelerator key.
diff --git a/Graphics/UI/Gtk/Layout/Notebook.chs b/Graphics/UI/Gtk/Layout/Notebook.chs
index 98e4bc3..6cb5261 100644
--- a/Graphics/UI/Gtk/Layout/Notebook.chs
+++ b/Graphics/UI/Gtk/Layout/Notebook.chs
@@ -186,7 +186,7 @@ import Control.Monad	(liftM)
 import Data.Maybe	(maybe)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -769,7 +769,7 @@ notebookSetMenuLabelText :: (NotebookClass self, WidgetClass child) => self
  -> String -- ^ @menuText@ - the label text
  -> IO ()
 notebookSetMenuLabelText self child menuText =
-  withUTFString menuText $ \menuTextPtr ->
+  withCString menuText $ \menuTextPtr ->
   {# call notebook_set_menu_label_text #}
     (toNotebook self)
     (toWidget child)
@@ -788,7 +788,7 @@ notebookGetMenuLabelText self child =
   {# call unsafe notebook_get_menu_label_text #}
     (toNotebook self)
     (toWidget child)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- | Returns the child widget contained in page number @pageNum@.
 --
@@ -839,7 +839,7 @@ notebookGetTabLabelText self child =
   {# call unsafe notebook_get_tab_label_text #}
     (toNotebook self)
     (toWidget child)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- | Query the packing attributes for the tab label of the page containing
 -- @child@.
@@ -915,7 +915,7 @@ notebookSetTabLabelText :: (NotebookClass self, WidgetClass child) => self
  -> String -- ^ @tabText@ - the label text
  -> IO ()
 notebookSetTabLabelText self child tabText =
-  withUTFString tabText $ \tabTextPtr ->
+  withCString tabText $ \tabTextPtr ->
   {# call notebook_set_tab_label_text #}
     (toNotebook self)
     (toWidget child)
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/CheckMenuItem.chs b/Graphics/UI/Gtk/MenuComboToolbar/CheckMenuItem.chs
index e1997ca..5ecb12a 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/CheckMenuItem.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/CheckMenuItem.chs
@@ -85,7 +85,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.CheckMenuItem (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Signals#}
@@ -112,7 +112,7 @@ checkMenuItemNewWithLabel ::
 checkMenuItemNewWithLabel label =
   makeNewObject mkCheckMenuItem $
   liftM (castPtr :: Ptr Widget -> Ptr CheckMenuItem) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe check_menu_item_new_with_label #}
     labelPtr
 
@@ -127,7 +127,7 @@ checkMenuItemNewWithMnemonic ::
 checkMenuItemNewWithMnemonic label =
   makeNewObject mkCheckMenuItem $
   liftM (castPtr :: Ptr Widget -> Ptr CheckMenuItem) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe check_menu_item_new_with_mnemonic #}
     labelPtr
 
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/Combo.chs b/Graphics/UI/Gtk/MenuComboToolbar/Combo.chs
index 195aee9..f0feed5 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/Combo.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/Combo.chs
@@ -93,7 +93,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.Combo (
 import Control.Monad	(liftM, mapM_)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object		(makeNewObject)
@@ -131,7 +131,7 @@ comboSetPopdownStrings self strs = do
   {#call list_clear_items#} list  0 (-1)
   mapM_ (\str -> do
     li <- makeNewObject mkWidget $ liftM castPtr $ 
-      withUTFString str {#call unsafe list_item_new_with_label#}
+      withCString str {#call unsafe list_item_new_with_label#}
     widgetShow li
     containerAdd list li)
     strs
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/ComboBox.chs b/Graphics/UI/Gtk/MenuComboToolbar/ComboBox.chs
index 506906e..317f058 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/ComboBox.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/ComboBox.chs
@@ -152,7 +152,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.ComboBox (
 import Control.Monad    (liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object  (makeNewObject)
@@ -537,7 +537,7 @@ comboBoxSetTitle :: ComboBoxClass self => self
  -> String -- ^ @title@ - a title for the menu in tearoff mode.
  -> IO ()
 comboBoxSetTitle self title =
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call gtk_combo_box_set_title #}
     (toComboBox self)
     titlePtr
@@ -553,7 +553,7 @@ comboBoxGetTitle :: ComboBoxClass self => self
 comboBoxGetTitle self =
   {# call gtk_combo_box_get_title #}
     (toComboBox self)
-  >>= peekUTFString
+  >>= peekCString
 #endif
 
 -- %hash c:fe18
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/ComboBoxEntry.chs b/Graphics/UI/Gtk/MenuComboToolbar/ComboBoxEntry.chs
index 5742de5..b0996ce 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/ComboBoxEntry.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/ComboBoxEntry.chs
@@ -91,7 +91,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.ComboBoxEntry (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#} hiding ( ListStore )
@@ -207,7 +207,7 @@ comboBoxEntryGetActiveText :: ComboBoxEntryClass self => self
 comboBoxEntryGetActiveText self = do
   strPtr <- {# call gtk_combo_box_get_active_text #} (toComboBox self)
   if strPtr == nullPtr then return Nothing else liftM Just $
-    peekUTFString (castPtr strPtr)
+    peekCString (castPtr strPtr)
 #endif
 
 --------------------
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/ImageMenuItem.chs b/Graphics/UI/Gtk/MenuComboToolbar/ImageMenuItem.chs
index 2926972..472aa93 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/ImageMenuItem.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/ImageMenuItem.chs
@@ -74,7 +74,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.ImageMenuItem (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
@@ -102,7 +102,7 @@ imageMenuItemNewFromStock ::
 imageMenuItemNewFromStock stockId =
   makeNewObject mkImageMenuItem $
   liftM (castPtr :: Ptr Widget -> Ptr ImageMenuItem) $
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call unsafe image_menu_item_new_from_stock #}
     stockIdPtr
     (AccelGroup nullForeignPtr)
@@ -115,7 +115,7 @@ imageMenuItemNewWithLabel ::
 imageMenuItemNewWithLabel label =
   makeNewObject mkImageMenuItem $
   liftM (castPtr :: Ptr Widget -> Ptr ImageMenuItem) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe image_menu_item_new_with_label #}
     labelPtr
 
@@ -130,7 +130,7 @@ imageMenuItemNewWithMnemonic ::
 imageMenuItemNewWithMnemonic label =
   makeNewObject mkImageMenuItem $
   liftM (castPtr :: Ptr Widget -> Ptr ImageMenuItem) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe image_menu_item_new_with_mnemonic #}
     labelPtr
 
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/Menu.chs b/Graphics/UI/Gtk/MenuComboToolbar/Menu.chs
index cf51057..140bb59 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/Menu.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/Menu.chs
@@ -118,7 +118,7 @@ import Control.Monad	(liftM)
 import Data.Maybe  (fromMaybe)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GList
 import System.Glib.Attributes
 import System.Glib.Properties
@@ -236,7 +236,7 @@ menuSetAccelPath :: MenuClass self => self
  -> String -- ^ @accelPath@ - a valid accelerator path
  -> IO ()
 menuSetAccelPath self accelPath =
-  withUTFString accelPath $ \accelPathPtr ->
+  withCString accelPath $ \accelPathPtr ->
   {# call menu_set_accel_path #}
     (toMenu self)
     accelPathPtr
@@ -246,7 +246,7 @@ menuSetAccelPath self accelPath =
 --
 menuSetTitle :: MenuClass self => self -> String -> IO ()
 menuSetTitle self title =
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call unsafe menu_set_title #}
     (toMenu self)
     titlePtr
@@ -259,7 +259,7 @@ menuGetTitle :: MenuClass self => self
 menuGetTitle self =
   {# call unsafe menu_get_title #}
     (toMenu self)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- | Removes the menu from the screen.
 --
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/MenuItem.chs b/Graphics/UI/Gtk/MenuComboToolbar/MenuItem.chs
index f671282..1752f9c 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/MenuItem.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/MenuItem.chs
@@ -115,7 +115,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.MenuItem (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
@@ -142,7 +142,7 @@ menuItemNewWithLabel ::
 menuItemNewWithLabel label =
   makeNewObject mkMenuItem $
   liftM (castPtr :: Ptr Widget -> Ptr MenuItem) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe menu_item_new_with_label #}
     labelPtr
 
@@ -157,7 +157,7 @@ menuItemNewWithMnemonic ::
 menuItemNewWithMnemonic label =
   makeNewObject mkMenuItem $
   liftM (castPtr :: Ptr Widget -> Ptr MenuItem) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe menu_item_new_with_mnemonic #}
     labelPtr
 
@@ -255,7 +255,7 @@ menuItemSetAccelPath :: MenuItemClass self => self
                  -- current path.
  -> IO ()
 menuItemSetAccelPath self accelPath =
-  maybeWith withUTFString accelPath $ \accelPathPtr ->
+  maybeWith withCString accelPath $ \accelPathPtr ->
   {# call menu_item_set_accel_path #}
     (toMenuItem self)
     accelPathPtr
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/MenuToolButton.chs b/Graphics/UI/Gtk/MenuComboToolbar/MenuToolButton.chs
index 4aad083..e271720 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/MenuToolButton.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/MenuToolButton.chs
@@ -83,7 +83,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.MenuToolButton (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
@@ -109,7 +109,7 @@ menuToolButtonNew :: WidgetClass iconWidget =>
 menuToolButtonNew iconWidget label =
   makeNewObject mkMenuToolButton $
   liftM (castPtr :: Ptr ToolItem -> Ptr MenuToolButton) $
-  maybeWith withUTFString label $ \labelPtr ->
+  maybeWith withCString label $ \labelPtr ->
   {# call gtk_menu_tool_button_new #}
     (maybe (Widget nullForeignPtr) toWidget iconWidget)
     labelPtr
@@ -123,7 +123,7 @@ menuToolButtonNewFromStock ::
 menuToolButtonNewFromStock stockId =
   makeNewObject mkMenuToolButton $
   liftM (castPtr :: Ptr ToolItem -> Ptr MenuToolButton) $
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call gtk_menu_tool_button_new_from_stock #}
     stockIdPtr
 
@@ -160,8 +160,8 @@ menuToolButtonSetArrowTooltip :: MenuToolButtonClass self => self
  -> String   -- ^ @tipPrivate@ - text to be used as private tooltip text
  -> IO ()
 menuToolButtonSetArrowTooltip self tooltips tipText tipPrivate =
-  withUTFString tipPrivate $ \tipPrivatePtr ->
-  withUTFString tipText $ \tipTextPtr ->
+  withCString tipPrivate $ \tipPrivatePtr ->
+  withCString tipText $ \tipTextPtr ->
   {# call gtk_menu_tool_button_set_arrow_tooltip #}
     (toMenuToolButton self)
     tooltips
@@ -180,7 +180,7 @@ menuToolButtonSetArrowTooltipText :: MenuToolButtonClass self => self
            -- button
  -> IO ()
 menuToolButtonSetArrowTooltipText self text =
-  withUTFString text $ \textPtr ->
+  withCString text $ \textPtr ->
   {# call gtk_menu_tool_button_set_arrow_tooltip_text #}
     (toMenuToolButton self)
     textPtr
@@ -196,7 +196,7 @@ menuToolButtonSetArrowTooltipMarkup :: MenuToolButtonClass self => self
            -- arrow button
  -> IO ()
 menuToolButtonSetArrowTooltipMarkup self markup =
-  withUTFString markup $ \markupPtr ->
+  withCString markup $ \markupPtr ->
   {# call gtk_menu_tool_button_set_arrow_tooltip_markup #}
     (toMenuToolButton self)
     markupPtr
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/RadioMenuItem.chs b/Graphics/UI/Gtk/MenuComboToolbar/RadioMenuItem.chs
index 7c19857..5b8bf49 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/RadioMenuItem.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/RadioMenuItem.chs
@@ -72,7 +72,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.RadioMenuItem (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
 
@@ -96,7 +96,7 @@ radioMenuItemNewWithLabel :: String -> IO RadioMenuItem
 radioMenuItemNewWithLabel label =
   makeNewObject mkRadioMenuItem $
   liftM (castPtr :: Ptr Widget -> Ptr RadioMenuItem) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe radio_menu_item_new_with_label #}
     nullPtr
     labelPtr
@@ -109,7 +109,7 @@ radioMenuItemNewWithMnemonic :: String -> IO RadioMenuItem
 radioMenuItemNewWithMnemonic label =
   makeNewObject mkRadioMenuItem $
   liftM (castPtr :: Ptr Widget -> Ptr RadioMenuItem) $
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call unsafe radio_menu_item_new_with_mnemonic #}
     nullPtr
     labelPtr
@@ -138,7 +138,7 @@ radioMenuItemNewWithLabelFromWidget ::
  -> IO RadioMenuItem
 radioMenuItemNewWithLabelFromWidget groupMember label =
   {# call unsafe radio_menu_item_get_group #} groupMember >>= \groupPtr ->
-  withUTFString label $ \strPtr ->
+  withCString label $ \strPtr ->
   makeNewObject mkRadioMenuItem $
   liftM (castPtr :: Ptr Widget -> Ptr RadioMenuItem) $
   {# call unsafe radio_menu_item_new_with_label #}
@@ -154,7 +154,7 @@ radioMenuItemNewWithMnemonicFromWidget :: RadioMenuItem
  -> IO RadioMenuItem
 radioMenuItemNewWithMnemonicFromWidget groupMember label =
   {# call unsafe radio_menu_item_get_group #} groupMember >>= \groupPtr ->
-  withUTFString label $ \strPtr -> 
+  withCString label $ \strPtr -> 
   makeNewObject mkRadioMenuItem $
   liftM (castPtr :: Ptr Widget -> Ptr RadioMenuItem) $
   {# call unsafe radio_menu_item_new_with_mnemonic #}
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/RadioToolButton.chs b/Graphics/UI/Gtk/MenuComboToolbar/RadioToolButton.chs
index d1d568a..a0a05d1 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/RadioToolButton.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/RadioToolButton.chs
@@ -79,7 +79,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.RadioToolButton (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GList
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -111,7 +111,7 @@ radioToolButtonNewFromStock ::
 radioToolButtonNewFromStock stockId =
   makeNewObject mkRadioToolButton $
   liftM (castPtr :: Ptr ToolItem -> Ptr RadioToolButton) $
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call gtk_radio_tool_button_new_from_stock #}
     nullPtr
     stockIdPtr
@@ -141,7 +141,7 @@ radioToolButtonNewWithStockFromWidget :: RadioToolButtonClass groupMember =>
 radioToolButtonNewWithStockFromWidget group stockId =
   makeNewObject mkRadioToolButton $
   liftM (castPtr :: Ptr ToolItem -> Ptr RadioToolButton) $
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call gtk_radio_tool_button_new_with_stock_from_widget #}
     (toRadioToolButton group)
     stockIdPtr
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/ToggleToolButton.chs b/Graphics/UI/Gtk/MenuComboToolbar/ToggleToolButton.chs
index 2714fde..62ab9b6 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/ToggleToolButton.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/ToggleToolButton.chs
@@ -79,7 +79,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.ToggleToolButton (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
@@ -111,7 +111,7 @@ toggleToolButtonNewFromStock ::
 toggleToolButtonNewFromStock stockId =
   makeNewObject mkToggleToolButton $
   liftM (castPtr :: Ptr ToolItem -> Ptr ToggleToolButton) $
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call gtk_toggle_tool_button_new_from_stock #}
     stockIdPtr
 
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/ToolButton.chs b/Graphics/UI/Gtk/MenuComboToolbar/ToolButton.chs
index b8b085d..c7452dd 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/ToolButton.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/ToolButton.chs
@@ -110,7 +110,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.ToolButton (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
@@ -135,7 +135,7 @@ toolButtonNew :: WidgetClass iconWidget =>
 toolButtonNew iconWidget label =
   makeNewObject mkToolButton $
   liftM (castPtr :: Ptr ToolItem -> Ptr ToolButton) $
-  maybeWith withUTFString label $ \labelPtr ->
+  maybeWith withCString label $ \labelPtr ->
   {# call gtk_tool_button_new #}
     (maybe (Widget nullForeignPtr) toWidget iconWidget)
     labelPtr
@@ -151,7 +151,7 @@ toolButtonNewFromStock ::
 toolButtonNewFromStock stockId =
   makeNewObject mkToolButton $
   liftM (castPtr :: Ptr ToolItem -> Ptr ToolButton) $
-  withUTFString stockId $ \stockIdPtr ->
+  withCString stockId $ \stockIdPtr ->
   {# call gtk_tool_button_new_from_stock #}
     stockIdPtr
 
@@ -170,7 +170,7 @@ toolButtonSetLabel :: ToolButtonClass self => self
                  -- @Nothing@.
  -> IO ()
 toolButtonSetLabel self label =
-  maybeWith withUTFString label $ \labelPtr ->
+  maybeWith withCString label $ \labelPtr ->
   {# call gtk_tool_button_set_label #}
     (toToolButton self)
     labelPtr
@@ -182,7 +182,7 @@ toolButtonGetLabel :: ToolButtonClass self => self -> IO (Maybe String)
 toolButtonGetLabel self =
   {# call gtk_tool_button_get_label #}
     (toToolButton self)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- | If set, an underline in the label property indicates that the next
 -- character should be used for the mnemonic accelerator key in the overflow
@@ -216,7 +216,7 @@ toolButtonSetStockId :: ToolButtonClass self => self
  -> Maybe StockId -- ^ @stockId@ - a name of a stock item, or @Nothing@
  -> IO ()
 toolButtonSetStockId self stockId =
-  maybeWith withUTFString stockId $ \stockIdPtr ->
+  maybeWith withCString stockId $ \stockIdPtr ->
   {# call gtk_tool_button_set_stock_id #}
     (toToolButton self)
     stockIdPtr
@@ -227,7 +227,7 @@ toolButtonGetStockId :: ToolButtonClass self => self -> IO (Maybe String)
 toolButtonGetStockId self =
   {# call gtk_tool_button_get_stock_id #}
     (toToolButton self)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- | Sets @icon@ as the widget used as icon on @button@. If @iconWidget@ is
 -- @Nothing@ the icon is determined by the \"stock_id\" property. If the
@@ -290,7 +290,7 @@ toolButtonSetIconName :: ToolButtonClass self => self
  -> String -- ^ @iconName@ - the name of the themed icon
  -> IO ()
 toolButtonSetIconName self iconName =
-  withUTFString iconName $ \iconNamePtr ->
+  withCString iconName $ \iconNamePtr ->
   {# call gtk_tool_button_set_icon_name #}
     (toToolButton self)
     iconNamePtr
@@ -308,7 +308,7 @@ toolButtonGetIconName self =
     (toToolButton self)
   >>= \strPtr -> if strPtr == nullPtr
                 then return ""
-                else peekUTFString strPtr
+                else peekCString strPtr
 #endif
 
 --------------------
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/ToolItem.chs b/Graphics/UI/Gtk/MenuComboToolbar/ToolItem.chs
index a5560f7..1ec80b7 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/ToolItem.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/ToolItem.chs
@@ -106,7 +106,7 @@ module Graphics.UI.Gtk.MenuComboToolbar.ToolItem (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 import Graphics.Rendering.Pango.Enums   (EllipsizeMode (..))
@@ -183,8 +183,8 @@ toolItemSetTooltip :: ToolItemClass self => self
  -> String   -- ^ @tipPrivate@ - text to be used as private tooltip text
  -> IO ()
 toolItemSetTooltip self tooltips tipText tipPrivate =
-  withUTFString tipPrivate $ \tipPrivatePtr ->
-  withUTFString tipText $ \tipTextPtr ->
+  withCString tipPrivate $ \tipPrivatePtr ->
+  withCString tipText $ \tipTextPtr ->
   {# call tool_item_set_tooltip #}
     (toToolItem self)
     tooltips
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/ToolItemGroup.chs b/Graphics/UI/Gtk/MenuComboToolbar/ToolItemGroup.chs
index a16e77e..4460333 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/ToolItemGroup.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/ToolItemGroup.chs
@@ -83,7 +83,7 @@ import System.Glib.FFI
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GList
-import System.Glib.UTFString
+import System.Glib.CString
 import Graphics.Rendering.Pango.Enums   (EllipsizeMode (..))
 import Graphics.UI.Gtk.General.Enums	(ReliefStyle(..))
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -102,7 +102,7 @@ toolItemGroupNew :: String -- ^ @label@   the label of the new group
 toolItemGroupNew label =
   makeNewObject mkToolItemGroup $
   liftM (castPtr :: Ptr Widget -> Ptr ToolItemGroup) $
-  withUTFString label $ \ labelPtr -> 
+  withCString label $ \ labelPtr -> 
     {#call gtk_tool_item_group_new #}
       labelPtr
 
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/ToolPalette.chs b/Graphics/UI/Gtk/MenuComboToolbar/ToolPalette.chs
index 533da2b..85dd9dd 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/ToolPalette.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/ToolPalette.chs
@@ -104,7 +104,7 @@ import System.Glib.FFI
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GList
-import System.Glib.UTFString
+import System.Glib.CString
 import Graphics.UI.Gtk.General.Structs (IconSize (..))
 import Graphics.UI.Gtk.General.Enums (ToolbarStyle (..))
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
diff --git a/Graphics/UI/Gtk/MenuComboToolbar/Toolbar.chs b/Graphics/UI/Gtk/MenuComboToolbar/Toolbar.chs
index 4d9e859..ff81aa3 100644
--- a/Graphics/UI/Gtk/MenuComboToolbar/Toolbar.chs
+++ b/Graphics/UI/Gtk/MenuComboToolbar/Toolbar.chs
@@ -157,7 +157,7 @@ import Control.Monad	(liftM)
 import Data.Maybe	(fromJust)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -193,8 +193,8 @@ toolbarNew =
 --
 mkToolText :: Maybe (String,String) -> (CString -> CString -> IO a) -> IO a
 mkToolText Nothing               fun = fun nullPtr nullPtr
-mkToolText (Just (text,private)) fun = withUTFString text $ \txtPtr -> 
-  withUTFString private $ \prvPtr -> fun txtPtr prvPtr
+mkToolText (Just (text,private)) fun = withCString text $ \txtPtr -> 
+  withCString private $ \prvPtr -> fun txtPtr prvPtr
 
 --------------------
 -- Methods
@@ -223,7 +223,7 @@ toolbarInsertNewButton :: ToolbarClass self => self
  -> Maybe (String,String)
  -> IO Button
 toolbarInsertNewButton self pos stockId tooltips = 
-  withUTFString stockId $ \stockPtr ->
+  withCString stockId $ \stockPtr ->
   mkToolText tooltips $ \textPtr privPtr ->
   makeNewObject mkButton $ liftM castPtr $ 
   {# call unsafe toolbar_insert_stock #}
@@ -282,7 +282,7 @@ toolbarInsertNewToggleButton self pos stockId tooltips = do
   size <- toolbarGetIconSize (toToolbar self)
   image <- imageNewFromStock stockId size
   makeNewObject mkToggleButton $ liftM castPtr $
-    withUTFString label $ \lblPtr -> mkToolText tooltips $ \textPtr privPtr ->
+    withCString label $ \lblPtr -> mkToolText tooltips $ \textPtr privPtr ->
     {#call unsafe toolbar_insert_element#} (toToolbar self) 
     toolbarChildToggleButton (Widget nullForeignPtr) lblPtr 
     textPtr privPtr (toWidget image) nullFunPtr nullPtr (fromIntegral pos)
@@ -343,7 +343,7 @@ toolbarInsertNewRadioButton self pos stockId tooltips rb = do
   size <- toolbarGetIconSize (toToolbar self)
   image <- imageNewFromStock stockId size
   makeNewObject mkRadioButton $ liftM castPtr $
-    withUTFString label $ \lblPtr -> mkToolText tooltips $ \textPtr privPtr ->
+    withCString label $ \lblPtr -> mkToolText tooltips $ \textPtr privPtr ->
     {#call unsafe toolbar_insert_element#} (toToolbar self) 
     toolbarChildRadioButton (maybe (Widget nullForeignPtr) toWidget rb) 
       lblPtr  textPtr privPtr (toWidget image) nullFunPtr nullPtr
diff --git a/Graphics/UI/Gtk/Misc/IMContextSimple.chs b/Graphics/UI/Gtk/Misc/IMContextSimple.chs
index b82e065..f9e96c9 100644
--- a/Graphics/UI/Gtk/Misc/IMContextSimple.chs
+++ b/Graphics/UI/Gtk/Misc/IMContextSimple.chs
@@ -53,7 +53,7 @@ import Control.Monad	(liftM)
 import Data.Map (Map)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 {#import Graphics.UI.Gtk.Types#}
 
 {# context lib="gtk" prefix="gtk" #}
@@ -88,8 +88,8 @@ imContextSimpleAddTable :: IMContextSimpleClass self => self
  -> IO ()
 imContextSimpleAddTable self table maxSeqLen nSeqs = do
   tableList <- mapM (\(x,y) -> do
-                       nx <- newUTFString x
-                       ny <- newUTFString y
+                       nx <- newCString x
+                       ny <- newCString y
                        return (nx, ny)) (M.toList table)
   withArray (concatMap (\(x,y) -> [x, y]) tableList) $ \(tablePtr :: Ptr CString) -> 
       {# call gtk_im_context_simple_add_table #}
diff --git a/Graphics/UI/Gtk/Misc/Tooltip.chs b/Graphics/UI/Gtk/Misc/Tooltip.chs
index 0300877..6e306b5 100644
--- a/Graphics/UI/Gtk/Misc/Tooltip.chs
+++ b/Graphics/UI/Gtk/Misc/Tooltip.chs
@@ -103,7 +103,7 @@ import Control.Monad	(liftM)
 import Data.Maybe (fromMaybe)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GObject		(constructNewGObject,makeNewGObject)
 import Graphics.UI.Gtk.General.Structs	(IconSize(..), Rectangle)
 import Graphics.Rendering.Pango.Markup
@@ -125,7 +125,7 @@ tooltipSetMarkup :: TooltipClass self => self
  -> Maybe Markup -- ^ @markup@ - a markup string (see Pango markup format) or 'Nothing'
  -> IO ()
 tooltipSetMarkup self markup =
-  maybeWith withUTFString markup $ \markupPtr ->
+  maybeWith withCString markup $ \markupPtr ->
   {# call gtk_tooltip_set_markup #}
     (toTooltip self)
     markupPtr
@@ -137,7 +137,7 @@ tooltipSetText :: TooltipClass self => self
  -> Maybe String -- ^ @text@ - a text string or 'Nothing'
  -> IO ()
 tooltipSetText self text =
-  maybeWith withUTFString text $ \textPtr ->
+  maybeWith withCString text $ \textPtr ->
   {# call gtk_tooltip_set_text #}
     (toTooltip self)
     textPtr
@@ -162,7 +162,7 @@ tooltipSetIconFromStock :: TooltipClass self => self
   -> IconSize -- ^ @size@ a stock icon size   
   -> IO ()
 tooltipSetIconFromStock self id size =
-  maybeWith withUTFString id $ \ idPtr -> 
+  maybeWith withCString id $ \ idPtr -> 
   {#call tooltip_set_icon_from_stock#}
     (toTooltip self)
     idPtr
@@ -180,7 +180,7 @@ tooltipSetIconFromIconName :: TooltipClass self => self
   -> IconSize  -- ^ @size@ a stock icon size     
   -> IO ()
 tooltipSetIconFromIconName self iconName size =
-  maybeWith withUTFString iconName $ \ iconPtr -> 
+  maybeWith withCString iconName $ \ iconPtr -> 
   {#call tooltip_set_icon_from_icon_name#}
     (toTooltip self)
     iconPtr
diff --git a/Graphics/UI/Gtk/Misc/Tooltips.chs b/Graphics/UI/Gtk/Misc/Tooltips.chs
index 3f482d3..a65b7e7 100644
--- a/Graphics/UI/Gtk/Misc/Tooltips.chs
+++ b/Graphics/UI/Gtk/Misc/Tooltips.chs
@@ -82,7 +82,7 @@ module Graphics.UI.Gtk.Misc.Tooltips (
   ) where
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import Graphics.UI.Gtk.Abstract.Object  (makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
 
@@ -143,8 +143,8 @@ tooltipsSetTip :: (TooltipsClass self, WidgetClass widget) => self
            -- useful if the user gets stuck.
  -> IO ()
 tooltipsSetTip self widget tipText tipPrivate =
-  withUTFString tipPrivate $ \tipPrivatePtr ->
-  withUTFString tipText $ \tipTextPtr ->
+  withCString tipPrivate $ \tipPrivatePtr ->
+  withCString tipText $ \tipTextPtr ->
   {# call unsafe tooltips_set_tip #}
     (toTooltips self)
     (toWidget widget)
@@ -163,8 +163,8 @@ tooltipsDataGet w = do
     else do --next line is a hack, tooltips struct member is at offset 0
            tooltips <- makeNewObject mkTooltips (return $ castPtr tipDataPtr)
            tipText  <- {#get TooltipsData->tip_text#} tipDataPtr
-                   >>= peekUTFString
+                   >>= peekCString
            tipPrivate <- {#get TooltipsData->tip_private#} tipDataPtr
-                     >>= peekUTFString
+                     >>= peekCString
            return $ Just $ (tooltips, tipText, tipPrivate)
 
diff --git a/Graphics/UI/Gtk/ModelView/CellView.chs b/Graphics/UI/Gtk/ModelView/CellView.chs
index 6f03a0b..d3e0587 100644
--- a/Graphics/UI/Gtk/ModelView/CellView.chs
+++ b/Graphics/UI/Gtk/ModelView/CellView.chs
@@ -69,7 +69,7 @@ module Graphics.UI.Gtk.ModelView.CellView (
 
 import Control.Monad	(liftM)
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties			(writeAttrFromStringProperty)
 {#import System.Glib.GList#}
@@ -102,7 +102,7 @@ cellViewNewWithMarkup ::
 cellViewNewWithMarkup markup =
   makeNewObject mkCellView $
   liftM (castPtr :: Ptr Widget -> Ptr CellView) $
-  withUTFString markup $ \markupPtr ->
+  withCString markup $ \markupPtr ->
   {# call gtk_cell_view_new_with_markup #}
     markupPtr
 
@@ -127,7 +127,7 @@ cellViewNewWithText ::
 cellViewNewWithText text =
   makeNewObject mkCellView $
   liftM (castPtr :: Ptr Widget -> Ptr CellView) $
-  withUTFString text $ \textPtr ->
+  withCString text $ \textPtr ->
   {# call gtk_cell_view_new_with_text #}
     textPtr
 
diff --git a/Graphics/UI/Gtk/ModelView/TreeModel.chs b/Graphics/UI/Gtk/ModelView/TreeModel.chs
index 983dd1d..ad37c86 100644
--- a/Graphics/UI/Gtk/ModelView/TreeModel.chs
+++ b/Graphics/UI/Gtk/ModelView/TreeModel.chs
@@ -158,7 +158,7 @@ import Control.Monad	(liftM)
 
 import System.Glib.FFI
 import System.Glib.Flags		(toFlags)
-import System.Glib.UTFString
+import System.Glib.CString
 {#import Graphics.UI.Gtk.Signals#}
 {#import Graphics.UI.Gtk.Types#}
 import System.Glib.StoreValue		(TMType, GenericValue,
@@ -247,7 +247,7 @@ treeModelGetIterFromString :: TreeModelClass self => self
  -> IO (Maybe TreeIter)
 treeModelGetIterFromString self pathString =
   receiveTreeIter $ \iterPtr ->
-  withUTFString pathString $ \pathStringPtr ->
+  withCString pathString $ \pathStringPtr ->
   {# call tree_model_get_iter_from_string #}
     (toTreeModel self)
     iterPtr
@@ -445,7 +445,7 @@ treeModelGetStringFromIter self iter = with iter $ \iter ->
   {# call gtk_tree_model_get_string_from_iter #}
     (toTreeModel self)
     iter
-  >>= readUTFString
+  >>= readCString
 #endif
 
 -- %hash c:228e d:304e
diff --git a/Graphics/UI/Gtk/ModelView/TreeSortable.chs b/Graphics/UI/Gtk/ModelView/TreeSortable.chs
index 133f18c..84cb6e0 100644
--- a/Graphics/UI/Gtk/ModelView/TreeSortable.chs
+++ b/Graphics/UI/Gtk/ModelView/TreeSortable.chs
@@ -92,7 +92,7 @@ import Control.Monad	(liftM, when)
 
 import System.Glib.FFI
 import System.Glib.Flags		(Flags, toFlags)
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GObject		(destroyFunPtr)
 {#import Graphics.UI.Gtk.Types#}
 {#import Graphics.UI.Gtk.General.Enums#}	(SortType(..))
diff --git a/Graphics/UI/Gtk/ModelView/TreeView.chs b/Graphics/UI/Gtk/ModelView/TreeView.chs
index 41c9025..2b76a0d 100644
--- a/Graphics/UI/Gtk/ModelView/TreeView.chs
+++ b/Graphics/UI/Gtk/ModelView/TreeView.chs
@@ -252,7 +252,7 @@ import Control.Monad	(liftM, mapM)
 import Data.Maybe	(fromMaybe)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GList		(fromGList)
 import System.Glib.Flags
 import System.Glib.Attributes
@@ -1190,7 +1190,7 @@ treeViewSetSearchEqualFunc :: TreeViewClass self => self
  -> IO ()
 treeViewSetSearchEqualFunc self (Just pred) = do
   fPtr <- mkTreeViewSearchEqualFunc (\_ _ keyPtr iterPtr _ -> do
-    key <- peekUTFString keyPtr
+    key <- peekCString keyPtr
     iter <- peek iterPtr
     liftM (fromBool . not) $ pred key iter)
   {# call tree_view_set_search_equal_func #} (toTreeView self) fPtr 
diff --git a/Graphics/UI/Gtk/ModelView/TreeViewColumn.chs b/Graphics/UI/Gtk/ModelView/TreeViewColumn.chs
index 88becd8..7ca298a 100644
--- a/Graphics/UI/Gtk/ModelView/TreeViewColumn.chs
+++ b/Graphics/UI/Gtk/ModelView/TreeViewColumn.chs
@@ -129,7 +129,7 @@ module Graphics.UI.Gtk.ModelView.TreeViewColumn (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 {#import System.Glib.GList#}			(fromGList)
 import System.Glib.Attributes
 import System.Glib.Properties
@@ -344,7 +344,7 @@ treeViewColumnClicked self =
 --
 treeViewColumnSetTitle :: TreeViewColumn -> String -> IO ()
 treeViewColumnSetTitle self title =
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call tree_view_column_set_title #}
     self
     titlePtr
@@ -355,7 +355,7 @@ treeViewColumnGetTitle :: TreeViewColumn -> IO (Maybe String)
 treeViewColumnGetTitle self =
   {# call unsafe tree_view_column_get_title #}
     self
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- | Set if the column should be sensitive to mouse clicks.
 --
diff --git a/Graphics/UI/Gtk/Multiline/TextBuffer.chs b/Graphics/UI/Gtk/Multiline/TextBuffer.chs
index dccdfa9..fec01ab 100644
--- a/Graphics/UI/Gtk/Multiline/TextBuffer.chs
+++ b/Graphics/UI/Gtk/Multiline/TextBuffer.chs
@@ -198,7 +198,7 @@ module Graphics.UI.Gtk.Multiline.TextBuffer (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GObject			(wrapNewGObject,
@@ -266,7 +266,7 @@ textBufferInsert :: TextBufferClass self => self
  -> String   -- ^ @text@ - text to insert
  -> IO ()
 textBufferInsert self iter text =
-  withUTFStringLen text $ \(textPtr, len) ->
+  withCStringLen text $ \(textPtr, len) ->
   {# call text_buffer_insert #}
     (toTextBuffer self)
     iter
@@ -295,7 +295,7 @@ textBufferInsertByteString self iter text =
 --
 textBufferInsertAtCursor :: TextBufferClass self => self -> String -> IO ()
 textBufferInsertAtCursor self text =
-  withUTFStringLen text $ \(textPtr, len) ->
+  withCStringLen text $ \(textPtr, len) ->
   {# call text_buffer_insert_at_cursor #}
     (toTextBuffer self)
     textPtr
@@ -330,7 +330,7 @@ textBufferInsertInteractive :: TextBufferClass self => self
  -> IO Bool  -- ^ returns whether text was actually inserted
 textBufferInsertInteractive self iter text defaultEditable =
   liftM toBool $
-  withUTFStringLen text $ \(textPtr, len) ->
+  withCStringLen text $ \(textPtr, len) ->
   {# call text_buffer_insert_interactive #}
     (toTextBuffer self)
     iter
@@ -365,7 +365,7 @@ textBufferInsertInteractiveAtCursor :: TextBufferClass self => self
  -> IO Bool -- ^ returns whether text was actually inserted
 textBufferInsertInteractiveAtCursor self text defaultEditable =
   liftM toBool $
-  withUTFStringLen text $ \(textPtr, len) ->
+  withCStringLen text $ \(textPtr, len) ->
   {# call text_buffer_insert_interactive_at_cursor #}
     (toTextBuffer self)
     textPtr
@@ -474,7 +474,7 @@ textBufferSetText :: TextBufferClass self => self
  -> String -- ^ @text@ - text to insert
  -> IO ()
 textBufferSetText self text =
-  withUTFStringLen text $ \(textPtr, len) ->
+  withCStringLen text $ \(textPtr, len) ->
   {# call text_buffer_set_text #}
     (toTextBuffer self)
     textPtr
@@ -498,7 +498,7 @@ textBufferGetText self start end includeHiddenChars =
     start
     end
     (fromBool includeHiddenChars)
-  >>= readUTFString
+  >>= readCString
 
 -- | Returns the text in the range [@start@,@end@). Excludes undisplayed text
 -- (text marked with tags that set the invisibility attribute) if
@@ -520,7 +520,7 @@ textBufferGetSlice self start end includeHiddenChars =
     start
     end
     (fromBool includeHiddenChars)
-  >>= readUTFString
+  >>= readCString
 
 -- | Deletes current contents of @buffer@, and inserts @text@ instead. Similar
 -- to 'textBufferSetText' but uses 'ByteString' buffers.
@@ -614,7 +614,7 @@ textBufferCreateMark :: TextBufferClass self => self
  -> IO TextMark  -- ^ returns the new 'TextMark' object
 textBufferCreateMark self markName where_ leftGravity =
   makeNewGObject mkTextMark $
-  maybeWith withUTFString markName $ \markNamePtr ->
+  maybeWith withCString markName $ \markNamePtr ->
   {# call text_buffer_create_mark #}
     (toTextBuffer self)
     markNamePtr
@@ -656,7 +656,7 @@ textBufferMoveMarkByName :: TextBufferClass self => self
  -> TextIter -- ^ @where@ - new location for mark
  -> IO ()
 textBufferMoveMarkByName self name where_ =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call text_buffer_move_mark_by_name #}
     (toTextBuffer self)
     namePtr
@@ -686,7 +686,7 @@ textBufferDeleteMarkByName :: TextBufferClass self => self
  -> MarkName -- ^ @name@ - name of a mark in @buffer@
  -> IO ()
 textBufferDeleteMarkByName self name =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call text_buffer_delete_mark_by_name #}
     (toTextBuffer self)
     namePtr
@@ -699,7 +699,7 @@ textBufferGetMark :: TextBufferClass self => self
  -> IO (Maybe TextMark) -- ^ returns a 'TextMark', or @Nothing@
 textBufferGetMark self name =
   maybeNull (makeNewGObject mkTextMark) $
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call unsafe text_buffer_get_mark #}
     (toTextBuffer self)
     namePtr
@@ -787,7 +787,7 @@ textBufferApplyTagByName :: TextBufferClass self => self
  -> TextIter -- ^ @end@ - other bound of range to be tagged
  -> IO ()
 textBufferApplyTagByName self name start end =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call text_buffer_apply_tag_by_name #}
     (toTextBuffer self)
     namePtr
@@ -803,7 +803,7 @@ textBufferRemoveTagByName :: TextBufferClass self => self
  -> TextIter -- ^ @end@ - other bound of range to be untagged
  -> IO ()
 textBufferRemoveTagByName self name start end =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call text_buffer_remove_tag_by_name #}
     (toTextBuffer self)
     namePtr
@@ -1361,12 +1361,12 @@ onBufferInsertText, afterBufferInsertText :: TextBufferClass self => self
 onBufferInsertText self user = 
   connect_BOXED_PTR_INT__NONE "insert-text" mkTextIterCopy False self $
     \iter strP strLen -> do
-      str <- peekUTFStringLen (strP,strLen)
+      str <- peekCStringLen (strP,strLen)
       user iter str 
 afterBufferInsertText self user = 
   connect_BOXED_PTR_INT__NONE "insert-text" mkTextIterCopy True self $
     \iter strP strLen -> do
-      str <- peekUTFStringLen (strP,strLen)
+      str <- peekCStringLen (strP,strLen)
       user iter str 
 
 -- | A 'TextMark' within the buffer was deleted.
diff --git a/Graphics/UI/Gtk/Multiline/TextIter.chs b/Graphics/UI/Gtk/Multiline/TextIter.chs
index 888a4ef..cbdbf01 100644
--- a/Graphics/UI/Gtk/Multiline/TextIter.chs
+++ b/Graphics/UI/Gtk/Multiline/TextIter.chs
@@ -144,7 +144,7 @@ import Data.Char	(chr)
 
 import System.Glib.FFI
 import System.Glib.Flags		(fromFlags)
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.GObject		(makeNewGObject)
 import System.Glib.GList
@@ -219,7 +219,7 @@ textIterGetChar ti = do
 textIterGetSlice :: TextIter -> TextIter -> IO String
 textIterGetSlice end start = do
   cStr <- {#call text_iter_get_slice#} start end
-  str <- peekUTFString cStr
+  str <- peekCString cStr
   {#call unsafe g_free#} (castPtr cStr)
   return str
 
@@ -231,7 +231,7 @@ textIterGetSlice end start = do
 textIterGetText :: TextIter -> TextIter -> IO String
 textIterGetText start end = do
   cStr <- {#call text_iter_get_text#} start end
-  str <- peekUTFString cStr
+  str <- peekCString cStr
   {#call unsafe g_free#} (castPtr cStr)
   return str
 
@@ -242,7 +242,7 @@ textIterGetText start end = do
 textIterGetVisibleSlice :: TextIter -> TextIter -> IO String
 textIterGetVisibleSlice start end = do
   cStr <- {#call text_iter_get_visible_slice#} start end
-  str <- peekUTFString cStr
+  str <- peekCString cStr
   {#call unsafe g_free#} (castPtr cStr)
   return str
 
@@ -253,7 +253,7 @@ textIterGetVisibleSlice start end = do
 textIterGetVisibleText :: TextIter -> TextIter -> IO String
 textIterGetVisibleText start end = do
   cStr <- {#call text_iter_get_visible_text#} start end
-  str <- peekUTFString cStr
+  str <- peekCString cStr
   {#call unsafe g_free#} (castPtr cStr)
   return str
 
@@ -847,7 +847,7 @@ textIterForwardSearch :: TextIter -> String -> [TextSearchFlags] ->
 textIterForwardSearch ti str flags limit = do
   start  <- makeEmptyTextIter
   end <- makeEmptyTextIter
-  found <- liftM toBool $ withUTFString str $ \cStr ->
+  found <- liftM toBool $ withCString str $ \cStr ->
     {#call unsafe text_iter_forward_search#} ti cStr 
     ((fromIntegral.fromFlags) flags) start end 
     (fromMaybe (TextIter nullForeignPtr) limit)
@@ -867,7 +867,7 @@ textIterBackwardSearch :: TextIter -> String -> [TextSearchFlags] ->
 textIterBackwardSearch ti str flags limit = do
   start  <- makeEmptyTextIter
   end <- makeEmptyTextIter
-  found <- liftM toBool $ withUTFString str $ \cStr ->
+  found <- liftM toBool $ withCString str $ \cStr ->
     {#call unsafe text_iter_backward_search#} ti cStr 
     ((fromIntegral.fromFlags) flags) start end 
     (fromMaybe (TextIter nullForeignPtr) limit)
diff --git a/Graphics/UI/Gtk/Multiline/TextMark.chs b/Graphics/UI/Gtk/Multiline/TextMark.chs
index 8b315b0..46791ee 100644
--- a/Graphics/UI/Gtk/Multiline/TextMark.chs
+++ b/Graphics/UI/Gtk/Multiline/TextMark.chs
@@ -86,7 +86,7 @@ module Graphics.UI.Gtk.Multiline.TextMark (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GObject		(makeNewGObject, wrapNewGObject)
@@ -119,7 +119,7 @@ textMarkNew ::
  -> IO TextMark
 textMarkNew  markName leftGravity =
   wrapNewGObject mkTextMark $
-  maybeWith withUTFString markName $ \markNamePtr ->
+  maybeWith withCString markName $ \markNamePtr ->
   {# call text_mark_new #}
     markNamePtr
     (fromBool leftGravity)
@@ -163,7 +163,7 @@ textMarkGetName :: TextMarkClass self => self -> IO (Maybe MarkName)
 textMarkGetName self =
   {# call unsafe text_mark_get_name #}
     (toTextMark self)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- | Gets the buffer this mark is located inside, or @Nothing@ if the mark is
 -- deleted.
diff --git a/Graphics/UI/Gtk/Ornaments/Frame.chs b/Graphics/UI/Gtk/Ornaments/Frame.chs
index 06ea9b0..d8742ff 100644
--- a/Graphics/UI/Gtk/Ornaments/Frame.chs
+++ b/Graphics/UI/Gtk/Ornaments/Frame.chs
@@ -76,7 +76,7 @@ module Graphics.UI.Gtk.Ornaments.Frame (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -108,7 +108,7 @@ frameSetLabel :: FrameClass self => self
  -> String -- ^ @label@ - the text to use as the label of the frame
  -> IO ()
 frameSetLabel self label =
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call frame_set_label #}
     (toFrame self)
     labelPtr
@@ -193,7 +193,7 @@ frameGetLabel self =
   throwIfNull "frameGetLabel: the title of the frame was not a Label widget."
   ({# call unsafe frame_get_label #}
     (toFrame self))
-  >>= peekUTFString
+  >>= peekCString
 
 --------------------
 -- Attributes
diff --git a/Graphics/UI/Gtk/Printing/PageSetup.chs b/Graphics/UI/Gtk/Printing/PageSetup.chs
index 27cba91..a9f2bd5 100644
--- a/Graphics/UI/Gtk/Printing/PageSetup.chs
+++ b/Graphics/UI/Gtk/Printing/PageSetup.chs
@@ -104,7 +104,7 @@ import System.Glib.FFI
 import System.Glib.GError
 import System.Glib.Attributes
 import System.Glib.Properties
-import System.Glib.UTFString
+import System.Glib.CString
 {#import Graphics.UI.Gtk.Types#}
 {#import Graphics.UI.Gtk.Printing.PaperSize#} (PaperSize(..), mkPaperSize, Unit(..))
 {#import Graphics.UI.Gtk.Printing.PrintSettings#} (PageOrientation (..))
@@ -133,7 +133,7 @@ pageSetupNewFromFile ::
  -> IO PageSetup
 pageSetupNewFromFile fileName =
   propagateGError $ \errorPtr ->
-  withUTFString fileName $ \fileNamePtr -> do
+  withCString fileName $ \fileNamePtr -> do
   setupPtr <- {# call gtk_page_setup_new_from_file #}
              fileNamePtr
              errorPtr
@@ -356,7 +356,7 @@ pageSetupLoadFile :: PageSetupClass self => self
 pageSetupLoadFile self fileName =
   liftM toBool $
   propagateGError $ \errorPtr ->
-  withUTFString fileName $ \fileNamePtr ->
+  withCString fileName $ \fileNamePtr ->
   {# call gtk_page_setup_load_file #}
     (toPageSetup self)
     fileNamePtr
@@ -375,7 +375,7 @@ pageSetupToFile :: PageSetupClass self => self
 pageSetupToFile self fileName =
   liftM toBool $
   propagateGError $ \errorPtr ->
-  withUTFString fileName $ \fileNamePtr ->
+  withCString fileName $ \fileNamePtr ->
   {# call gtk_page_setup_to_file #}
     (toPageSetup self)
     fileNamePtr
diff --git a/Graphics/UI/Gtk/Printing/PaperSize.chs b/Graphics/UI/Gtk/Printing/PaperSize.chs
index b68a8bf..acbd157 100644
--- a/Graphics/UI/Gtk/Printing/PaperSize.chs
+++ b/Graphics/UI/Gtk/Printing/PaperSize.chs
@@ -78,7 +78,7 @@ module Graphics.UI.Gtk.Printing.PaperSize (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GList
 {#import Graphics.UI.Gtk.Types#}
 
@@ -115,7 +115,7 @@ paperSizeNew ::
     Maybe String -- ^ @name@ - a paper size name, or 'Nothing'
  -> IO PaperSize
 paperSizeNew name =
-  maybeWith withUTFString name $ \namePtr ->
+  maybeWith withCString name $ \namePtr ->
   {# call gtk_paper_size_new #}
     namePtr
   >>= mkPaperSize
@@ -135,8 +135,8 @@ paperSizeNewFromPpd ::
  -> Double -- ^ @height@ - the paper height in points
  -> IO PaperSize
 paperSizeNewFromPpd ppdName ppdDisplayName width height =
-  withUTFString ppdDisplayName $ \ppdDisplayNamePtr ->
-  withUTFString ppdName $ \ppdNamePtr ->
+  withCString ppdDisplayName $ \ppdDisplayNamePtr ->
+  withCString ppdName $ \ppdNamePtr ->
   {# call gtk_paper_size_new_from_ppd #}
     ppdNamePtr
     ppdDisplayNamePtr
@@ -157,8 +157,8 @@ paperSizeNewCustom ::
  -> Unit   -- ^ @unit@ - the unit for @width@ and @height@
  -> IO PaperSize
 paperSizeNewCustom name displayName width height unit =
-  withUTFString displayName $ \displayNamePtr ->
-  withUTFString name $ \namePtr ->
+  withCString displayName $ \displayNamePtr ->
+  withCString name $ \namePtr ->
   {# call gtk_paper_size_new_custom #}
     namePtr
     displayNamePtr
@@ -203,7 +203,7 @@ paperSizeGetName :: PaperSize
 paperSizeGetName self =
   {# call gtk_paper_size_get_name #}
     self
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Gets the human-readable name of the 'PaperSize'.
 --
@@ -214,7 +214,7 @@ paperSizeGetDisplayName :: PaperSize
 paperSizeGetDisplayName self =
   {# call gtk_paper_size_get_display_name #}
     self
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Gets the PPD name of the 'PaperSize', which may be
 --
@@ -225,7 +225,7 @@ paperSizeGetPpdName :: PaperSize
 paperSizeGetPpdName self =
   {# call gtk_paper_size_get_ppd_name #}
     self
-  >>= maybePeekUTFString
+  >>= maybePeekCString
 
 -- | Gets the paper width of the 'PaperSize', in units
 -- of @unit@.
@@ -341,7 +341,7 @@ paperSizeGetDefault ::
     IO String -- ^ returns the name of the default paper size.
 paperSizeGetDefault =
   {# call gtk_paper_size_get_default #}
-  >>= peekUTFString
+  >>= peekCString
 
 #endif
 
diff --git a/Graphics/UI/Gtk/Printing/PrintOperation.chs b/Graphics/UI/Gtk/Printing/PrintOperation.chs
index fa98e9b..683c761 100644
--- a/Graphics/UI/Gtk/Printing/PrintOperation.chs
+++ b/Graphics/UI/Gtk/Printing/PrintOperation.chs
@@ -156,7 +156,7 @@ import Control.Monad	(liftM)
 import System.Glib.FFI
 import System.Glib.Attributes
 import System.Glib.Properties
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GError
 {#import Graphics.UI.Gtk.Types#}
 {#import Graphics.UI.Gtk.Signals#}
@@ -232,7 +232,7 @@ printOperationSetJobName :: PrintOperationClass self => self
  -> String -- ^ @jobName@ - a string that identifies the print job
  -> IO ()
 printOperationSetJobName self jobName =
-  withUTFString jobName $ \jobNamePtr ->
+  withCString jobName $ \jobNamePtr ->
   {# call gtk_print_operation_set_job_name #}
     (toPrintOperation self)
     jobNamePtr
@@ -329,7 +329,7 @@ printOperationSetExportFilename :: PrintOperationClass self => self
  -> String -- ^ @filename@ - the filename for the exported file
  -> IO ()
 printOperationSetExportFilename self filename =
-  withUTFString filename $ \filenamePtr ->
+  withCString filename $ \filenamePtr ->
   {# call gtk_print_operation_set_export_filename #}
     (toPrintOperation self)
     filenamePtr
@@ -368,7 +368,7 @@ printOperationSetCustomTabLabel :: PrintOperationClass self => self
            -- label
  -> IO ()
 printOperationSetCustomTabLabel self label =
-  withUTFString label $ \labelPtr ->
+  withCString label $ \labelPtr ->
   {# call gtk_print_operation_set_custom_tab_label #}
     (toPrintOperation self)
     labelPtr
@@ -470,7 +470,7 @@ printOperationGetStatusString :: PrintOperationClass self => self
 printOperationGetStatusString self =
   {# call gtk_print_operation_get_status_string #}
     (toPrintOperation self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | A convenience function to find out if the print operation is finished,
 -- either successfully ('PrintStatusFinished') or unsuccessfully
diff --git a/Graphics/UI/Gtk/Printing/PrintSettings.chs b/Graphics/UI/Gtk/Printing/PrintSettings.chs
index e1f6a76..93777a6 100644
--- a/Graphics/UI/Gtk/Printing/PrintSettings.chs
+++ b/Graphics/UI/Gtk/Printing/PrintSettings.chs
@@ -147,7 +147,7 @@ import Control.Monad	(liftM)
 import System.Glib.FFI
 import System.Glib.Attributes
 import System.Glib.Properties
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GError
 {#import Graphics.UI.Gtk.Types#}
 import Graphics.UI.Gtk.Printing.PaperSize (PaperSize(PaperSize), mkPaperSize, Unit(..))
@@ -194,7 +194,7 @@ printSettingsNewFromFile ::
 printSettingsNewFromFile fileName =
   wrapNewGObject mkPrintSettings $
   propagateGError $ \errorPtr ->
-  withUTFString fileName $ \fileNamePtr -> 
+  withCString fileName $ \fileNamePtr -> 
   {# call gtk_print_settings_new_from_file #}
         fileNamePtr
         errorPtr
@@ -220,7 +220,7 @@ printSettingsHasKey :: PrintSettingsClass self => self
  -> IO Bool -- ^ returns @True@, if @key@ has a value
 printSettingsHasKey self key =
   liftM toBool $
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_has_key #}
     (toPrintSettings self)
     keyPtr
@@ -231,11 +231,11 @@ printSettingsGet :: PrintSettingsClass self => self
  -> String    -- ^ @key@ - a key
  -> IO String -- ^ returns the string value for @key@
 printSettingsGet self key =
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_get #}
     (toPrintSettings self)
     keyPtr
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Associates @value@ with @key@.
 --
@@ -244,8 +244,8 @@ printSettingsSet :: PrintSettingsClass self => self
  -> String -- ^ @value@ - a string value
  -> IO ()
 printSettingsSet self key value =
-  withUTFString value $ \valuePtr ->
-  withUTFString key $ \keyPtr ->
+  withCString value $ \valuePtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_set #}
     (toPrintSettings self)
     keyPtr
@@ -257,7 +257,7 @@ printSettingsUnset :: PrintSettingsClass self => self
  -> String -- ^ @key@ - a key
  -> IO ()
 printSettingsUnset self key =
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_unset #}
     (toPrintSettings self)
     keyPtr
@@ -292,7 +292,7 @@ printSettingsGetBool :: PrintSettingsClass self => self
  -> IO Bool -- ^ returns @True@, if @key@ maps to a true value.
 printSettingsGetBool self key =
   liftM toBool $
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_get_bool #}
     (toPrintSettings self)
     keyPtr
@@ -304,7 +304,7 @@ printSettingsSetBool :: PrintSettingsClass self => self
  -> Bool   -- ^ @value@ - a boolean
  -> IO ()
 printSettingsSetBool self key value =
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_set_bool #}
     (toPrintSettings self)
     keyPtr
@@ -317,7 +317,7 @@ printSettingsGetDouble :: PrintSettingsClass self => self
  -> IO Double -- ^ returns the double value of @key@
 printSettingsGetDouble self key =
   liftM realToFrac $
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_get_double #}
     (toPrintSettings self)
     keyPtr
@@ -334,7 +334,7 @@ printSettingsGetDoubleWithDefault :: PrintSettingsClass self => self
  -> IO Double -- ^ returns the floating point number associated with @key@
 printSettingsGetDoubleWithDefault self key def =
   liftM realToFrac $
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_get_double_with_default #}
     (toPrintSettings self)
     keyPtr
@@ -347,7 +347,7 @@ printSettingsSetDouble :: PrintSettingsClass self => self
  -> Double -- ^ @value@ - a double value
  -> IO ()
 printSettingsSetDouble self key value =
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_set_double #}
     (toPrintSettings self)
     keyPtr
@@ -362,7 +362,7 @@ printSettingsGetLength :: PrintSettingsClass self => self
  -> IO Double -- ^ returns the length value of @key@, converted to @unit@
 printSettingsGetLength self key unit =
   liftM realToFrac $
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_get_length #}
     (toPrintSettings self)
     keyPtr
@@ -376,7 +376,7 @@ printSettingsSetLength :: PrintSettingsClass self => self
  -> Unit   -- ^ @unit@ - the unit of @length@
  -> IO ()
 printSettingsSetLength self key value unit =
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_set_length #}
     (toPrintSettings self)
     keyPtr
@@ -390,7 +390,7 @@ printSettingsGetInt :: PrintSettingsClass self => self
  -> IO Int -- ^ returns the integer value of @key@
 printSettingsGetInt self key =
   liftM fromIntegral $
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_get_int #}
     (toPrintSettings self)
     keyPtr
@@ -404,7 +404,7 @@ printSettingsGetIntWithDefault :: PrintSettingsClass self => self
  -> IO Int -- ^ returns the integer value of @key@
 printSettingsGetIntWithDefault self key def =
   liftM fromIntegral $
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_get_int_with_default #}
     (toPrintSettings self)
     keyPtr
@@ -417,7 +417,7 @@ printSettingsSetInt :: PrintSettingsClass self => self
  -> Int    -- ^ @value@ - an integer
  -> IO ()
 printSettingsSetInt self key value =
-  withUTFString key $ \keyPtr ->
+  withCString key $ \keyPtr ->
   {# call gtk_print_settings_set_int #}
     (toPrintSettings self)
     keyPtr
@@ -429,14 +429,14 @@ printSettingsGetPrinter :: PrintSettingsClass self => self
 printSettingsGetPrinter self =
   {# call gtk_print_settings_get_printer #}
     (toPrintSettings self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Convenience function to obtain the value of ''PrintSettingsPrinter''.
 printSettingsSetPrinter :: PrintSettingsClass self => self
  -> String -- ^ @printer@ - the printer name
  -> IO ()
 printSettingsSetPrinter self printer =
-  withUTFString printer $ \printerPtr ->
+  withCString printer $ \printerPtr ->
   {# call gtk_print_settings_set_printer #}
     (toPrintSettings self)
     printerPtr
@@ -820,14 +820,14 @@ printSettingsGetDefaultSource :: PrintSettingsClass self => self
 printSettingsGetDefaultSource self =
   {# call gtk_print_settings_get_default_source #}
     (toPrintSettings self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the value of 'PrintSettingsDefaultSource'.
 printSettingsSetDefaultSource :: PrintSettingsClass self => self
  -> String -- ^ @defaultSource@ - the default source
  -> IO ()
 printSettingsSetDefaultSource self defaultSource =
-  withUTFString defaultSource $ \defaultSourcePtr ->
+  withCString defaultSource $ \defaultSourcePtr ->
   {# call gtk_print_settings_set_default_source #}
     (toPrintSettings self)
     defaultSourcePtr
@@ -838,14 +838,14 @@ printSettingsGetMediaType :: PrintSettingsClass self => self
 printSettingsGetMediaType self =
   {# call gtk_print_settings_get_media_type #}
     (toPrintSettings self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the value of 'PrintSettingsMediaType'.
 printSettingsSetMediaType :: PrintSettingsClass self => self
  -> String -- ^ @mediaType@ - the media type
  -> IO ()
 printSettingsSetMediaType self mediaType =
-  withUTFString mediaType $ \mediaTypePtr ->
+  withCString mediaType $ \mediaTypePtr ->
   {# call gtk_print_settings_set_media_type #}
     (toPrintSettings self)
     mediaTypePtr
@@ -856,14 +856,14 @@ printSettingsGetDither :: PrintSettingsClass self => self
 printSettingsGetDither self =
   {# call gtk_print_settings_get_dither #}
     (toPrintSettings self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the value of 'PrintSettingsDither'.
 printSettingsSetDither :: PrintSettingsClass self => self
  -> String -- ^ @dither@ - the dithering that is used
  -> IO ()
 printSettingsSetDither self dither =
-  withUTFString dither $ \ditherPtr ->
+  withCString dither $ \ditherPtr ->
   {# call gtk_print_settings_set_dither #}
     (toPrintSettings self)
     ditherPtr
@@ -874,14 +874,14 @@ printSettingsGetFinishings :: PrintSettingsClass self => self
 printSettingsGetFinishings self =
   {# call gtk_print_settings_get_finishings #}
     (toPrintSettings self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the value of 'PrintSettingsFinishings'.
 printSettingsSetFinishings :: PrintSettingsClass self => self
  -> String -- ^ @finishings@ - the finishings
  -> IO ()
 printSettingsSetFinishings self finishings =
-  withUTFString finishings $ \finishingsPtr ->
+  withCString finishings $ \finishingsPtr ->
   {# call gtk_print_settings_set_finishings #}
     (toPrintSettings self)
     finishingsPtr
@@ -892,14 +892,14 @@ printSettingsGetOutputBin :: PrintSettingsClass self => self
 printSettingsGetOutputBin self =
   {# call gtk_print_settings_get_output_bin #}
     (toPrintSettings self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the value of 'PrintSettingsOutputBin'.
 printSettingsSetOutputBin :: PrintSettingsClass self => self
  -> String -- ^ @outputBin@ - the output bin
  -> IO ()
 printSettingsSetOutputBin self outputBin =
-  withUTFString outputBin $ \outputBinPtr ->
+  withCString outputBin $ \outputBinPtr ->
   {# call gtk_print_settings_set_output_bin #}
     (toPrintSettings self)
     outputBinPtr
@@ -916,7 +916,7 @@ printSettingsLoadFile :: PrintSettingsClass self => self
 printSettingsLoadFile self fileName =
   liftM toBool $
   propagateGError $ \errorPtr ->
-  withUTFString fileName $ \fileNamePtr ->
+  withCString fileName $ \fileNamePtr ->
   {# call gtk_print_settings_load_file #}
     (toPrintSettings self)
     fileNamePtr
@@ -935,7 +935,7 @@ printSettingsToFile :: PrintSettingsClass self => self
 printSettingsToFile self fileName =
   liftM toBool $
   propagateGError $ \errorPtr ->
-  withUTFString fileName $ \fileNamePtr ->
+  withCString fileName $ \fileNamePtr ->
   {# call gtk_print_settings_to_file #}
     (toPrintSettings self)
     fileNamePtr
diff --git a/Graphics/UI/Gtk/Recent/RecentChooser.chs b/Graphics/UI/Gtk/Recent/RecentChooser.chs
index d1f2fcb..e09394a 100644
--- a/Graphics/UI/Gtk/Recent/RecentChooser.chs
+++ b/Graphics/UI/Gtk/Recent/RecentChooser.chs
@@ -92,7 +92,7 @@ module Graphics.UI.Gtk.Recent.RecentChooser (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GList
@@ -161,7 +161,7 @@ recentChooserSetCurrentURI :: RecentChooserClass self => self
 recentChooserSetCurrentURI self uri =
   checkGError ( \errorPtr ->
                 liftM toBool $
-                withUTFString uri $ \uriPtr ->
+                withCString uri $ \uriPtr ->
                 {# call gtk_recent_chooser_set_current_uri #}
                     (toRecentChooser self)
                     uriPtr
@@ -178,7 +178,7 @@ recentChooserGetCurrentURI :: RecentChooserClass self => self
 recentChooserGetCurrentURI self =
   {# call gtk_recent_chooser_get_current_uri #}
     (toRecentChooser self)
-  >>= readUTFString
+  >>= readCString
 
 -- | Gets the 'RecentInfo' currently selected by
 -- @chooser@.
@@ -205,7 +205,7 @@ recentChooserSelectURI :: RecentChooserClass self => self
 recentChooserSelectURI self uri =
   checkGError ( \errorPtr ->
                 liftM toBool $
-                withUTFString uri $ \uriPtr ->
+                withCString uri $ \uriPtr ->
                 {# call gtk_recent_chooser_select_uri #}
                     (toRecentChooser self)
                     uriPtr
@@ -221,7 +221,7 @@ recentChooserUnselectURI :: RecentChooserClass self => self
  -> String -- ^ @uri@ - a URI
  -> IO ()
 recentChooserUnselectURI self uri =
-  withUTFString uri $ \uriPtr ->
+  withCString uri $ \uriPtr ->
   {# call gtk_recent_chooser_unselect_uri #}
     (toRecentChooser self)
     uriPtr
@@ -275,7 +275,7 @@ recentChooserGetURIs self =
           (toRecentChooser self)
           lengthPtr
   length <- peek lengthPtr
-  mapM peekUTFString =<< peekArray (fromIntegral length) str
+  mapM peekCString =<< peekArray (fromIntegral length) str
 
 -- | Adds @filter@ to the list of 'RecentFilter' objects held by @chooser@.
 --
diff --git a/Graphics/UI/Gtk/Recent/RecentFilter.chs b/Graphics/UI/Gtk/Recent/RecentFilter.chs
index 1f1d03a..22ea999 100644
--- a/Graphics/UI/Gtk/Recent/RecentFilter.chs
+++ b/Graphics/UI/Gtk/Recent/RecentFilter.chs
@@ -87,7 +87,7 @@ module Graphics.UI.Gtk.Recent.RecentFilter (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Flags (Flags, toFlags, fromFlags)
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
@@ -130,7 +130,7 @@ recentFilterGetName :: RecentFilterClass self => self
 recentFilterGetName self =
   {# call gtk_recent_filter_get_name #}
     (toRecentFilter self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the human-readable name of the filter; this is the string that will be displayed in the
 -- recently used resources selector user interface if there is a selectable list of filters.
@@ -141,7 +141,7 @@ recentFilterSetName :: RecentFilterClass self => self
  -> String -- ^ @name@ - then human readable name of @filter@
  -> IO ()
 recentFilterSetName self name =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call gtk_recent_filter_set_name #}
     (toRecentFilter self)
     namePtr
@@ -154,7 +154,7 @@ recentFilterAddMimeType :: RecentFilterClass self => self
  -> String -- ^ @mimeType@ - a MIME type
  -> IO ()
 recentFilterAddMimeType self mimeType =
-  withUTFString mimeType $ \mimeTypePtr ->
+  withCString mimeType $ \mimeTypePtr ->
   {# call gtk_recent_filter_add_mime_type #}
     (toRecentFilter self)
     mimeTypePtr
@@ -168,7 +168,7 @@ recentFilterAddPattern :: RecentFilterClass self => self
  -> String -- ^ @pattern@ - a file pattern
  -> IO ()
 recentFilterAddPattern self pattern =
-  withUTFString pattern $ \patternPtr ->
+  withCString pattern $ \patternPtr ->
   {# call gtk_recent_filter_add_pattern #}
     (toRecentFilter self)
     patternPtr
@@ -190,7 +190,7 @@ recentFilterAddApplication :: RecentFilterClass self => self
  -> String -- ^ @application@ - an application name
  -> IO ()
 recentFilterAddApplication self application =
-  withUTFString application $ \applicationPtr ->
+  withCString application $ \applicationPtr ->
   {# call gtk_recent_filter_add_application #}
     (toRecentFilter self)
     applicationPtr
@@ -205,7 +205,7 @@ recentFilterAddGroup :: RecentFilterClass self => self
  -> String -- ^ @group@ - a group name
  -> IO ()
 recentFilterAddGroup self group =
-  withUTFString group $ \groupPtr ->
+  withCString group $ \groupPtr ->
   {# call gtk_recent_filter_add_group #}
     (toRecentFilter self)
     groupPtr
diff --git a/Graphics/UI/Gtk/Recent/RecentInfo.chs b/Graphics/UI/Gtk/Recent/RecentInfo.chs
index 7689982..5497671 100644
--- a/Graphics/UI/Gtk/Recent/RecentInfo.chs
+++ b/Graphics/UI/Gtk/Recent/RecentInfo.chs
@@ -61,7 +61,7 @@ import Control.Monad	(liftM)
 import System.Glib.FFI
 import System.Glib.Attributes
 import System.Glib.Properties
-import System.Glib.UTFString
+import System.Glib.CString
 {#import Graphics.UI.Gtk.Types#}
 
 {# context lib="gtk" prefix="gtk" #}
@@ -135,7 +135,7 @@ recentInfoGetApplicationInfo self appName =
   alloca $ \countPtr ->
   alloca $ \timePtr ->
   allocaArray 0 $ \execPtr -> 
-  withUTFString appName $ \appNamePtr -> do
+  withCString appName $ \appNamePtr -> do
     success <- liftM toBool $
               {# call gtk_recent_info_get_application_info #}
                 self
@@ -145,7 +145,7 @@ recentInfoGetApplicationInfo self appName =
                 timePtr
     if success 
        then do
-         exec <- mapM peekUTFString =<< peekArray 0 execPtr
+         exec <- mapM peekCString =<< peekArray 0 execPtr
          count <- peek countPtr
          time <- peek timePtr
          return (Just (exec, fromIntegral count, fromIntegral time))
@@ -160,7 +160,7 @@ recentInfoGetApplications self =
   alloca $ \lengthPtr -> do
     str <- {# call gtk_recent_info_get_applications #} self lengthPtr
     length <- peek lengthPtr
-    mapM peekUTFString =<< peekArray (fromIntegral length) str
+    mapM peekCString =<< peekArray (fromIntegral length) str
 
 -- | Gets the (short) description of the resource.
 --
@@ -171,7 +171,7 @@ recentInfoGetDescription :: RecentInfo
 recentInfoGetDescription self =
   {# call gtk_recent_info_get_description #}
     self
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Gets the name of the resource. If none has been defined, the basename of the resource is obtained.
 --
@@ -182,7 +182,7 @@ recentInfoGetDisplayName :: RecentInfo
 recentInfoGetDisplayName self =
   {# call gtk_recent_info_get_display_name #}
     self
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Returns all groups registered for the recently used item info. 
 --
@@ -193,7 +193,7 @@ recentInfoGetGroups self =
   alloca $ \lengthPtr -> do
     str <- {# call gtk_recent_info_get_groups #} self lengthPtr
     length <- peek lengthPtr
-    mapM peekUTFString =<< peekArray (fromIntegral length) str
+    mapM peekCString =<< peekArray (fromIntegral length) str
 
 -- | Retrieves the icon of size size associated to the resource MIME type.
 --
@@ -217,7 +217,7 @@ recentInfoGetMimeType :: RecentInfo
 recentInfoGetMimeType self =
   {# call gtk_recent_info_get_mime_type #}
     self
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Gets the timestamp (seconds from system's Epoch) when the resource was last modified.
 --
@@ -252,7 +252,7 @@ recentInfoGetShortName :: RecentInfo
 recentInfoGetShortName self =
   {# call gtk_recent_info_get_short_name #}
     self
-  >>= readUTFString
+  >>= readCString
 
 -- | Gets the URI of the resource.
 --
@@ -263,7 +263,7 @@ recentInfoGetURI :: RecentInfo
 recentInfoGetURI self =
   {# call gtk_recent_info_get_uri #}
     self
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Gets a displayable version of the resource's URI. If the resource is local, it returns a local path;
 -- if the resource is not local, it returns the UTF-8 encoded content of 'recentInfoGetUri'.
@@ -274,7 +274,7 @@ recentInfoGetURIDisplay :: RecentInfo -> IO String
 recentInfoGetURIDisplay self =
   {# call gtk_recent_info_get_uri_display #}
     self
-  >>= readUTFString
+  >>= readCString
 
 -- | Gets the timestamp (seconds from system's Epoch) when the resource was last visited.
 --
@@ -296,7 +296,7 @@ recentInfoHasApplication :: RecentInfo
                          -> IO Bool -- ^ returns  'True' if an application with name @appName@ was found, 'False' otherwise.
 recentInfoHasApplication self appName =
   liftM toBool $
-  withUTFString appName $ \appNamePtr ->
+  withCString appName $ \appNamePtr ->
   {# call gtk_recent_info_has_application #}
     self
     appNamePtr
@@ -310,7 +310,7 @@ recentInfoHasGroup :: RecentInfo
                    -> IO Bool -- ^ returns    'True' if the group was found. 
 recentInfoHasGroup self groupName =
   liftM toBool $
-  withUTFString groupName $ \groupNamePtr ->
+  withCString groupName $ \groupNamePtr ->
   {# call gtk_recent_info_has_group #}
     self
     groupNamePtr
@@ -336,7 +336,7 @@ recentInfoLastApplication :: RecentInfo
 recentInfoLastApplication self =
   {# call gtk_recent_info_last_application #}
     self
-  >>= readUTFString
+  >>= readCString
 
 -- | Checks whether two 'RecentInfo' structures point to the same resource.
 --
diff --git a/Graphics/UI/Gtk/Recent/RecentManager.chs b/Graphics/UI/Gtk/Recent/RecentManager.chs
index 17ab1d3..ca77d35 100644
--- a/Graphics/UI/Gtk/Recent/RecentManager.chs
+++ b/Graphics/UI/Gtk/Recent/RecentManager.chs
@@ -95,7 +95,7 @@ import System.Glib.FFI
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GList
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GObject        (Quark, quarkFromString)
 import System.Glib.GError   (GErrorDomain, GErrorClass(..), propagateGError, checkGError)
 {#import Graphics.UI.Gtk.Recent.RecentInfo#} (RecentInfo, mkRecentInfo)
@@ -152,7 +152,7 @@ recentManagerAddItem :: RecentManagerClass self => self
             -- recently used resources list
 recentManagerAddItem self uri =
   liftM toBool $
-  withUTFString uri $ \uriPtr ->
+  withCString uri $ \uriPtr ->
   {# call gtk_recent_manager_add_item #}
     (toRecentManager self)
     uriPtr
@@ -171,7 +171,7 @@ recentManagerRemoveItem :: RecentManagerClass self => self
 recentManagerRemoveItem self uri =
       checkGError (\errorPtr ->
                        liftM toBool $
-                       withUTFString uri $ \uriPtr ->
+                       withCString uri $ \uriPtr ->
                        {# call gtk_recent_manager_remove_item #}
                             (toRecentManager self)
                             uriPtr
@@ -195,7 +195,7 @@ recentManagerLookupItem :: RecentManagerClass self => self
                           -- resources list. 
 recentManagerLookupItem self uri =
   propagateGError $ \errorPtr ->
-  withUTFString uri $ \uriPtr -> do
+  withCString uri $ \uriPtr -> do
   result <- {# call unsafe gtk_recent_manager_lookup_item #}
            (toRecentManager self)
            uriPtr
@@ -213,7 +213,7 @@ recentManagerHasItem :: RecentManagerClass self => self
  -> IO Bool -- ^ returns @True@ if the resource was found, @False@ otherwise.
 recentManagerHasItem self uri =
   liftM toBool $
-  withUTFString uri $ \uriPtr ->
+  withCString uri $ \uriPtr ->
   {# call gtk_recent_manager_has_item #}
     (toRecentManager self)
     uriPtr
@@ -233,8 +233,8 @@ recentManagerMoveItem :: RecentManagerClass self => self
 recentManagerMoveItem self uri newUri =
   checkGError ( \errorPtr ->
                     liftM toBool $
-                    withUTFString newUri $ \newUriPtr ->
-                    withUTFString uri $ \uriPtr ->
+                    withCString newUri $ \newUriPtr ->
+                    withCString uri $ \uriPtr ->
                     {# call gtk_recent_manager_move_item #}
                          (toRecentManager self)
                          uriPtr
diff --git a/Graphics/UI/Gtk/Selectors/ColorButton.chs b/Graphics/UI/Gtk/Selectors/ColorButton.chs
index c269be4..c99ba14 100644
--- a/Graphics/UI/Gtk/Selectors/ColorButton.chs
+++ b/Graphics/UI/Gtk/Selectors/ColorButton.chs
@@ -81,7 +81,7 @@ module Graphics.UI.Gtk.Selectors.ColorButton (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
@@ -189,7 +189,7 @@ colorButtonSetTitle :: ColorButtonClass self => self
  -> String -- ^ @title@ - String containing new window title.
  -> IO ()
 colorButtonSetTitle self title =
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call gtk_color_button_set_title #}
     (toColorButton self)
     titlePtr
@@ -201,7 +201,7 @@ colorButtonGetTitle :: ColorButtonClass self => self
 colorButtonGetTitle self =
   {# call gtk_color_button_get_title #}
     (toColorButton self)
-  >>= peekUTFString
+  >>= peekCString
 
 --------------------
 -- Attributes
diff --git a/Graphics/UI/Gtk/Selectors/ColorSelectionDialog.chs b/Graphics/UI/Gtk/Selectors/ColorSelectionDialog.chs
index 26f0d78..aafccf6 100644
--- a/Graphics/UI/Gtk/Selectors/ColorSelectionDialog.chs
+++ b/Graphics/UI/Gtk/Selectors/ColorSelectionDialog.chs
@@ -64,7 +64,7 @@ module Graphics.UI.Gtk.Selectors.ColorSelectionDialog (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
 import Graphics.UI.Gtk.General.Structs	(colorSelectionDialogGetColor,
@@ -86,6 +86,6 @@ colorSelectionDialogNew ::
 colorSelectionDialogNew title =
   makeNewObject mkColorSelectionDialog $
   liftM (castPtr :: Ptr Widget -> Ptr ColorSelectionDialog) $
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call unsafe color_selection_dialog_new #}
     titlePtr
diff --git a/Graphics/UI/Gtk/Selectors/FileChooser.chs b/Graphics/UI/Gtk/Selectors/FileChooser.chs
index 5884327..a104d86 100644
--- a/Graphics/UI/Gtk/Selectors/FileChooser.chs
+++ b/Graphics/UI/Gtk/Selectors/FileChooser.chs
@@ -225,7 +225,7 @@ module Graphics.UI.Gtk.Selectors.FileChooser (
 import Control.Monad (liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 {#import Graphics.UI.Gtk.Types#}
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -346,7 +346,7 @@ fileChooserSetCurrentName :: FileChooserClass self => self
  -> FilePath -- ^ @name@ - the filename to use, as a Unicode string
  -> IO ()
 fileChooserSetCurrentName self name =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call gtk_file_chooser_set_current_name #}
     (toFileChooser self)
     namePtr
diff --git a/Graphics/UI/Gtk/Selectors/FileChooserButton.chs b/Graphics/UI/Gtk/Selectors/FileChooserButton.chs
index d7fdb9e..072e9a0 100644
--- a/Graphics/UI/Gtk/Selectors/FileChooserButton.chs
+++ b/Graphics/UI/Gtk/Selectors/FileChooserButton.chs
@@ -79,7 +79,7 @@ module Graphics.UI.Gtk.Selectors.FileChooserButton (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -107,7 +107,7 @@ fileChooserButtonNew ::
 fileChooserButtonNew title action =
   makeNewObject mkFileChooserButton $
   liftM (castPtr :: Ptr Widget -> Ptr FileChooserButton) $
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call gtk_file_chooser_button_new #}
     titlePtr
     ((fromIntegral . fromEnum) action)
@@ -123,8 +123,8 @@ fileChooserButtonNewWithBackend ::
 fileChooserButtonNewWithBackend title action backend =
   makeNewObject mkFileChooserButton $
   liftM (castPtr :: Ptr Widget -> Ptr FileChooserButton) $
-  withUTFString backend $ \backendPtr ->
-  withUTFString title $ \titlePtr ->
+  withCString backend $ \backendPtr ->
+  withCString title $ \titlePtr ->
   {# call gtk_file_chooser_button_new_with_backend #}
     titlePtr
     ((fromIntegral . fromEnum) action)
@@ -153,7 +153,7 @@ fileChooserButtonGetTitle :: FileChooserButtonClass self => self
 fileChooserButtonGetTitle self =
   {# call gtk_file_chooser_button_get_title #}
     (toFileChooserButton self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Modifies the @title@ of the browse dialog used by the button.
 --
@@ -161,7 +161,7 @@ fileChooserButtonSetTitle :: FileChooserButtonClass self => self
  -> String -- ^ @title@ - the new browse dialog title.
  -> IO ()
 fileChooserButtonSetTitle self title =
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call gtk_file_chooser_button_set_title #}
     (toFileChooserButton self)
     titlePtr
diff --git a/Graphics/UI/Gtk/Selectors/FileFilter.chs b/Graphics/UI/Gtk/Selectors/FileFilter.chs
index 5120507..778151d 100644
--- a/Graphics/UI/Gtk/Selectors/FileFilter.chs
+++ b/Graphics/UI/Gtk/Selectors/FileFilter.chs
@@ -82,7 +82,7 @@ import Control.Monad	(liftM)
 
 import System.Glib.FFI
 import System.Glib.Flags		(Flags, fromFlags)
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.GObject              (DestroyNotify, destroyFunPtr)
 {#import Graphics.UI.Gtk.Types#}
@@ -119,7 +119,7 @@ fileFilterSetName :: FileFilter
  -> String -- ^ @name@ - the human-readable-name for the filter
  -> IO ()
 fileFilterSetName self name =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call gtk_file_filter_set_name #}
     self
     namePtr
@@ -131,7 +131,7 @@ fileFilterGetName :: FileFilter
 fileFilterGetName self =
   {# call gtk_file_filter_get_name #}
     self
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Adds a rule allowing a given mime type to @filter@.
 --
@@ -139,7 +139,7 @@ fileFilterAddMimeType :: FileFilter
  -> String     -- ^ @mimeType@ - name of a MIME type
  -> IO ()
 fileFilterAddMimeType self mimeType =
-  withUTFString mimeType $ \mimeTypePtr ->
+  withCString mimeType $ \mimeTypePtr ->
   {# call gtk_file_filter_add_mime_type #}
     self
     mimeTypePtr
@@ -150,7 +150,7 @@ fileFilterAddPattern :: FileFilter
  -> String     -- ^ @pattern@ - a shell style glob
  -> IO ()
 fileFilterAddPattern self pattern =
-  withUTFString pattern $ \patternPtr ->
+  withCString pattern $ \patternPtr ->
   {# call gtk_file_filter_add_pattern #}
     self
     patternPtr
@@ -179,10 +179,10 @@ fileFilterAddCustom self needed func = do
       uriPtr         <- {# get GtkFileFilterInfo->uri          #} filterInfoPtr
       displayNamePtr <- {# get GtkFileFilterInfo->display_name #} filterInfoPtr
       mimeTypePtr    <- {# get GtkFileFilterInfo->mime_type    #} filterInfoPtr
-      filename    <- maybePeek peekUTFString filenamePtr
-      uri         <- maybePeek peekUTFString uriPtr
-      displayName <- maybePeek peekUTFString displayNamePtr
-      mimeType    <- maybePeek peekUTFString mimeTypePtr
+      filename    <- maybePeek peekCString filenamePtr
+      uri         <- maybePeek peekCString uriPtr
+      displayName <- maybePeek peekCString displayNamePtr
+      mimeType    <- maybePeek peekCString mimeTypePtr
       liftM fromBool $ func filename uri displayName mimeType)
   {# call gtk_file_filter_add_custom #}
     self
diff --git a/Graphics/UI/Gtk/Selectors/FileSelection.chs b/Graphics/UI/Gtk/Selectors/FileSelection.chs
index 9cd7970..24f0fab 100644
--- a/Graphics/UI/Gtk/Selectors/FileSelection.chs
+++ b/Graphics/UI/Gtk/Selectors/FileSelection.chs
@@ -94,7 +94,7 @@ module Graphics.UI.Gtk.Selectors.FileSelection (
 import Control.Monad            (liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 {#import Graphics.UI.Gtk.Types#}
@@ -118,7 +118,7 @@ fileSelectionNew ::
 fileSelectionNew title =
   makeNewObject mkFileSelection $
   liftM (castPtr :: Ptr Widget -> Ptr FileSelection) $
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call unsafe file_selection_new #}
     titlePtr
 
@@ -137,7 +137,7 @@ fileSelectionSetFilename :: FileSelectionClass self => self
  -> String -- ^ @filename@ - a string to set as the default file name.
  -> IO ()
 fileSelectionSetFilename self filename =
-  withUTFString filename $ \filenamePtr ->
+  withCString filename $ \filenamePtr ->
 #if defined (WIN32) && GTK_CHECK_VERSION(2,6,0)
   {# call unsafe gtk_file_selection_set_filename_utf8 #}
 #else
@@ -159,7 +159,7 @@ fileSelectionGetFilename self =
   {# call unsafe gtk_file_selection_get_filename #}
 #endif
     (toFileSelection self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Shows the file operation buttons, if they have previously been hidden.
 -- The rest of the widgets in the dialog will be resized accordingly.
@@ -190,7 +190,7 @@ fileSelectionComplete :: FileSelectionClass self => self
            -- any filenames in the current directory.
  -> IO ()
 fileSelectionComplete self pattern =
-  withUTFString pattern $ \patternPtr ->
+  withCString pattern $ \patternPtr ->
   {# call file_selection_complete #}
     (toFileSelection self)
     patternPtr
@@ -209,7 +209,7 @@ fileSelectionGetSelections self = do
 #endif
     (toFileSelection self)
   cStrs <- peekArray0 nullPtr cStrArr
-  result <- mapM peekUTFString cStrs
+  result <- mapM peekCString cStrs
   {# call unsafe g_strfreev #} cStrArr
   return result
 
diff --git a/Graphics/UI/Gtk/Selectors/FontButton.chs b/Graphics/UI/Gtk/Selectors/FontButton.chs
index 39f9914..f0c8f11 100644
--- a/Graphics/UI/Gtk/Selectors/FontButton.chs
+++ b/Graphics/UI/Gtk/Selectors/FontButton.chs
@@ -88,7 +88,7 @@ module Graphics.UI.Gtk.Selectors.FontButton (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -118,7 +118,7 @@ fontButtonNewWithFont ::
 fontButtonNewWithFont fontname =
   makeNewObject mkFontButton $
   liftM (castPtr :: Ptr Widget -> Ptr FontButton) $
-  withUTFString fontname $ \fontnamePtr ->
+  withCString fontname $ \fontnamePtr ->
   {# call gtk_font_button_new_with_font #}
     fontnamePtr
 
@@ -133,7 +133,7 @@ fontButtonSetFontName :: FontButtonClass self => self
             -- the font selection dialog exists, otherwise @False@.
 fontButtonSetFontName self fontname =
   liftM toBool $
-  withUTFString fontname $ \fontnamePtr ->
+  withCString fontname $ \fontnamePtr ->
   {# call gtk_font_button_set_font_name #}
     (toFontButton self)
     fontnamePtr
@@ -146,7 +146,7 @@ fontButtonGetFontName :: FontButtonClass self => self
 fontButtonGetFontName self =
   {# call gtk_font_button_get_font_name #}
     (toFontButton self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | If @showStyle@ is @True@, the font style will be displayed along with
 -- name of the selected font.
@@ -237,7 +237,7 @@ fontButtonSetTitle :: FontButtonClass self => self
  -> String -- ^ @title@ - a string containing the font selection dialog title
  -> IO ()
 fontButtonSetTitle self title =
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call gtk_font_button_set_title #}
     (toFontButton self)
     titlePtr
@@ -250,7 +250,7 @@ fontButtonGetTitle :: FontButtonClass self => self
 fontButtonGetTitle self =
   {# call gtk_font_button_get_title #}
     (toFontButton self)
-  >>= peekUTFString
+  >>= peekCString
 
 --------------------
 -- Attributes
diff --git a/Graphics/UI/Gtk/Selectors/FontSelection.chs b/Graphics/UI/Gtk/Selectors/FontSelection.chs
index 4194d3a..de54bce 100644
--- a/Graphics/UI/Gtk/Selectors/FontSelection.chs
+++ b/Graphics/UI/Gtk/Selectors/FontSelection.chs
@@ -75,7 +75,7 @@ module Graphics.UI.Gtk.Selectors.FontSelection (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -105,7 +105,7 @@ fontSelectionGetFontName :: FontSelectionClass self => self
 fontSelectionGetFontName self =
   {# call unsafe font_selection_get_font_name #}
     (toFontSelection self)
-  >>= maybePeek readUTFString
+  >>= maybePeek readCString
 
 -- | Sets the currently-selected font.
 --
@@ -114,7 +114,7 @@ fontSelectionSetFontName :: FontSelectionClass self => self
  -> IO Bool -- ^ returns @True@ if the font was found.
 fontSelectionSetFontName self fontname =
   liftM toBool $
-  withUTFString fontname $ \fontnamePtr ->
+  withCString fontname $ \fontnamePtr ->
   {# call font_selection_set_font_name #}
     (toFontSelection self)
     fontnamePtr
@@ -125,13 +125,13 @@ fontSelectionGetPreviewText :: FontSelectionClass self => self -> IO String
 fontSelectionGetPreviewText self =
   {# call unsafe font_selection_get_preview_text #}
     (toFontSelection self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the text displayed in the preview area.
 --
 fontSelectionSetPreviewText :: FontSelectionClass self => self -> String -> IO ()
 fontSelectionSetPreviewText self text =
-  withUTFString text $ \textPtr ->
+  withCString text $ \textPtr ->
   {# call font_selection_set_preview_text #}
     (toFontSelection self)
     textPtr
diff --git a/Graphics/UI/Gtk/Selectors/FontSelectionDialog.chs b/Graphics/UI/Gtk/Selectors/FontSelectionDialog.chs
index 88cfc6b..980449a 100644
--- a/Graphics/UI/Gtk/Selectors/FontSelectionDialog.chs
+++ b/Graphics/UI/Gtk/Selectors/FontSelectionDialog.chs
@@ -80,7 +80,7 @@ module Graphics.UI.Gtk.Selectors.FontSelectionDialog (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
 {#import Graphics.UI.Gtk.Types#}
@@ -98,7 +98,7 @@ fontSelectionDialogNew ::
 fontSelectionDialogNew title =
   makeNewObject mkFontSelectionDialog $
   liftM (castPtr :: Ptr Widget -> Ptr FontSelectionDialog) $
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call unsafe font_selection_dialog_new #}
     titlePtr
 
@@ -113,7 +113,7 @@ fontSelectionDialogGetFontName :: FontSelectionDialogClass self => self
 fontSelectionDialogGetFontName self =
   {# call font_selection_dialog_get_font_name #}
     (toFontSelectionDialog self)
-  >>= maybePeek readUTFString
+  >>= maybePeek readCString
 
 -- | Sets the currently-selected font.
 --
@@ -122,7 +122,7 @@ fontSelectionDialogSetFontName :: FontSelectionDialogClass self => self
  -> IO Bool -- ^ returns @True@ if the font was found.
 fontSelectionDialogSetFontName self fontname =
   liftM toBool $
-  withUTFString fontname $ \fontnamePtr ->
+  withCString fontname $ \fontnamePtr ->
   {# call font_selection_dialog_set_font_name #}
     (toFontSelectionDialog self)
     fontnamePtr
@@ -133,13 +133,13 @@ fontSelectionDialogGetPreviewText :: FontSelectionDialogClass self => self -> IO
 fontSelectionDialogGetPreviewText self =
   {# call unsafe font_selection_dialog_get_preview_text #}
     (toFontSelectionDialog self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the text displayed in the preview area.
 --
 fontSelectionDialogSetPreviewText :: FontSelectionDialogClass self => self -> String -> IO ()
 fontSelectionDialogSetPreviewText self text =
-  withUTFString text $ \textPtr ->
+  withCString text $ \textPtr ->
   {# call font_selection_dialog_set_preview_text #}
     (toFontSelectionDialog self)
     textPtr
diff --git a/Graphics/UI/Gtk/Signals.chs b/Graphics/UI/Gtk/Signals.chs
index b38c72d..f4ba932 100644
--- a/Graphics/UI/Gtk/Signals.chs
+++ b/Graphics/UI/Gtk/Signals.chs
@@ -109,7 +109,7 @@ module Graphics.UI.Gtk.Signals (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString   (peekUTFString,maybePeekUTFString)
+import System.Glib.CString   (peekCString,maybePeekCString)
 import System.Glib.GError      (failOnGError)
 {#import System.Glib.Signals#}
 {#import System.Glib.GObject#} 
@@ -573,7 +573,7 @@ connect_STRING__NONE signal after obj user =
   where action :: Ptr GObject -> CString -> IO ()
         action _ str1 =
           failOnGError $
-          peekUTFString str1 >>= \str1' ->
+          peekCString str1 >>= \str1' ->
           user str1'
 
 connect_STRING_STRING__NONE :: 
@@ -586,8 +586,8 @@ connect_STRING_STRING__NONE signal after obj user =
   where action :: Ptr GObject -> CString -> CString -> IO ()
         action _ str1 str2 =
           failOnGError $
-          peekUTFString str2 >>= \str2' ->
-          peekUTFString str1 >>= \str1' ->
+          peekCString str2 >>= \str2' ->
+          peekCString str1 >>= \str1' ->
           user str1' str2'
 
 connect_WORD_WORD__NONE :: 
@@ -612,7 +612,7 @@ connect_WORD_STRING__NONE signal after obj user =
   where action :: Ptr GObject -> Word -> CString -> IO ()
         action _ int1 str2 =
           failOnGError $
-          peekUTFString str2 >>= \str2' ->
+          peekCString str2 >>= \str2' ->
           user int1 str2'
 
 connect_BOXED_PTR_INT__NONE :: 
@@ -651,7 +651,7 @@ connect_OBJECT_STRING__NONE signal after obj user =
   where action :: Ptr GObject -> Ptr GObject -> CString -> IO ()
         action _ obj1 str2 =
           failOnGError $
-          peekUTFString str2 >>= \str2' ->
+          peekCString str2 >>= \str2' ->
           makeNewGObject (GObject, objectUnrefFromMainloop) (return obj1) >>= \obj1' ->
           user (unsafeCastGObject obj1') str2'
 
@@ -665,7 +665,7 @@ connect_STRING__BOOL signal after obj user =
   where action :: Ptr GObject -> CString -> IO Bool
         action _ str1 =
           failOnGError $
-          peekUTFString str1 >>= \str1' ->
+          peekCString str1 >>= \str1' ->
           user str1'
 
 connect_OBJECT_PTR_BOXED__BOOL :: 
@@ -798,7 +798,7 @@ connect_BOXED_STRING__NONE signal boxedPre1 after obj user =
   where action :: Ptr GObject -> Ptr () -> CString -> IO ()
         action _ box1 str2 =
           failOnGError $
-          peekUTFString str2 >>= \str2' ->
+          peekCString str2 >>= \str2' ->
           boxedPre1 (castPtr box1) >>= \box1' ->
           user box1' str2'
 
@@ -865,7 +865,7 @@ connect_INT_STRING_INT__NONE signal after obj user =
   where action :: Ptr GObject -> Int -> CString -> Int -> IO ()
         action _ int1 str2 int3 =
           failOnGError $
-          peekUTFString str2 >>= \str2' ->
+          peekCString str2 >>= \str2' ->
           user int1 str2' int3
 
 connect_STRING_INT_ENUM_INT__NONE :: 
@@ -878,7 +878,7 @@ connect_STRING_INT_ENUM_INT__NONE signal after obj user =
   where action :: Ptr GObject -> CString -> Int -> Int -> Int -> IO ()
         action _ str1 int2 enum3 int4 =
           failOnGError $
-          peekUTFString str1 >>= \str1' ->
+          peekCString str1 >>= \str1' ->
           user str1' int2 (toEnum enum3) int4
 
 connect_OBJECT__BOOL :: 
diff --git a/Graphics/UI/Gtk/Windows/AboutDialog.chs b/Graphics/UI/Gtk/Windows/AboutDialog.chs
index a6ea6ed..b6ba921 100644
--- a/Graphics/UI/Gtk/Windows/AboutDialog.chs
+++ b/Graphics/UI/Gtk/Windows/AboutDialog.chs
@@ -142,7 +142,7 @@ import Control.Monad	(liftM)
 import Data.Maybe	(fromMaybe)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.GObject      	(makeNewGObject, destroyFunPtr)
@@ -177,7 +177,7 @@ aboutDialogGetName self =
   {# call gtk_about_dialog_get_name #}
 #endif
     (toAboutDialog self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the name to display in the about dialog. If this is not set, it
 -- defaults to the program executable name.
@@ -186,7 +186,7 @@ aboutDialogSetName :: AboutDialogClass self => self
  -> String -- ^ @name@ - the program name
  -> IO ()
 aboutDialogSetName self name =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
 #if GTK_CHECK_VERSION(2,12,0)
   {# call gtk_about_dialog_set_program_name #}
 #else
@@ -201,13 +201,13 @@ aboutDialogGetVersion :: AboutDialogClass self => self -> IO String
 aboutDialogGetVersion self =
   {# call gtk_about_dialog_get_version #}
     (toAboutDialog self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the version string to display in the about dialog.
 --
 aboutDialogSetVersion :: AboutDialogClass self => self -> String -> IO ()
 aboutDialogSetVersion self version =
-  withUTFString version $ \versionPtr ->
+  withCString version $ \versionPtr ->
   {# call gtk_about_dialog_set_version #}
     (toAboutDialog self)
     versionPtr
@@ -218,14 +218,14 @@ aboutDialogGetCopyright :: AboutDialogClass self => self -> IO String
 aboutDialogGetCopyright self =
   {# call gtk_about_dialog_get_copyright #}
     (toAboutDialog self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the copyright string to display in the about dialog. This should be
 -- a short string of one or two lines.
 --
 aboutDialogSetCopyright :: AboutDialogClass self => self -> String -> IO ()
 aboutDialogSetCopyright self copyright =
-  withUTFString copyright $ \copyrightPtr ->
+  withCString copyright $ \copyrightPtr ->
   {# call gtk_about_dialog_set_copyright #}
     (toAboutDialog self)
     copyrightPtr
@@ -236,14 +236,14 @@ aboutDialogGetComments :: AboutDialogClass self => self -> IO String
 aboutDialogGetComments self =
   {# call gtk_about_dialog_get_comments #}
     (toAboutDialog self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the comments string to display in the about dialog. This should be a
 -- short string of one or two lines.
 --
 aboutDialogSetComments :: AboutDialogClass self => self -> String -> IO ()
 aboutDialogSetComments self comments =
-  withUTFString comments $ \commentsPtr ->
+  withCString comments $ \commentsPtr ->
   {# call gtk_about_dialog_set_comments #}
     (toAboutDialog self)
     commentsPtr
@@ -254,7 +254,7 @@ aboutDialogGetLicense :: AboutDialogClass self => self -> IO (Maybe String)
 aboutDialogGetLicense self =
   {# call gtk_about_dialog_get_license #}
     (toAboutDialog self)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- | Sets the license information to be displayed in the secondary license
 -- dialog. If @license@ is @Nothing@, the license button is hidden.
@@ -263,7 +263,7 @@ aboutDialogSetLicense :: AboutDialogClass self => self
  -> Maybe String -- ^ @license@ - the license information or @Nothing@
  -> IO ()
 aboutDialogSetLicense self license =
-  maybeWith withUTFString license $ \licensePtr ->
+  maybeWith withCString license $ \licensePtr ->
   {# call gtk_about_dialog_set_license #}
     (toAboutDialog self)
     licensePtr
@@ -274,7 +274,7 @@ aboutDialogGetWebsite :: AboutDialogClass self => self -> IO String
 aboutDialogGetWebsite self =
   {# call gtk_about_dialog_get_website #}
     (toAboutDialog self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the URL to use for the website link.
 --
@@ -282,7 +282,7 @@ aboutDialogSetWebsite :: AboutDialogClass self => self
  -> String -- ^ @website@ - a URL string starting with \"http:\/\/\"
  -> IO ()
 aboutDialogSetWebsite self website =
-  withUTFString website $ \websitePtr ->
+  withCString website $ \websitePtr ->
   {# call gtk_about_dialog_set_website #}
     (toAboutDialog self)
     websitePtr
@@ -293,14 +293,14 @@ aboutDialogGetWebsiteLabel :: AboutDialogClass self => self -> IO String
 aboutDialogGetWebsiteLabel self =
   {# call gtk_about_dialog_get_website_label #}
     (toAboutDialog self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the label to be used for the website link. It defaults to the
 -- website URL.
 --
 aboutDialogSetWebsiteLabel :: AboutDialogClass self => self -> String -> IO ()
 aboutDialogSetWebsiteLabel self websiteLabel =
-  withUTFString websiteLabel $ \websiteLabelPtr ->
+  withCString websiteLabel $ \websiteLabelPtr ->
   {# call gtk_about_dialog_set_website_label #}
     (toAboutDialog self)
     websiteLabelPtr
@@ -312,7 +312,7 @@ aboutDialogSetAuthors :: AboutDialogClass self => self
  -> [String] -- ^ @authors@ - a list of author names
  -> IO ()
 aboutDialogSetAuthors self authors =
-  withUTFStringArray0 authors $ \authorsPtr ->
+  withCStringArray0 authors $ \authorsPtr ->
   {# call gtk_about_dialog_set_authors #}
     (toAboutDialog self)
     authorsPtr
@@ -324,7 +324,7 @@ aboutDialogGetAuthors :: AboutDialogClass self => self -> IO [String]
 aboutDialogGetAuthors self =
   {# call gtk_about_dialog_get_authors #}
     (toAboutDialog self)
-  >>= peekUTFStringArray0
+  >>= peekCStringArray0
 
 -- | Sets the strings which are displayed in the artists tab of the secondary
 -- credits dialog.
@@ -333,7 +333,7 @@ aboutDialogSetArtists :: AboutDialogClass self => self
  -> [String] -- ^ @artists@ - a list of artist names
  -> IO ()
 aboutDialogSetArtists self artists =
-  withUTFStringArray0 artists $ \artistsPtr ->
+  withCStringArray0 artists $ \artistsPtr ->
   {# call gtk_about_dialog_set_artists #}
     (toAboutDialog self)
     artistsPtr
@@ -345,7 +345,7 @@ aboutDialogGetArtists :: AboutDialogClass self => self -> IO [String]
 aboutDialogGetArtists self =
   {# call gtk_about_dialog_get_artists #}
     (toAboutDialog self)
-  >>= peekUTFStringArray0
+  >>= peekCStringArray0
 
 -- | Sets the strings which are displayed in the documenters tab of the
 -- secondary credits dialog.
@@ -354,7 +354,7 @@ aboutDialogSetDocumenters :: AboutDialogClass self => self
  -> [String] -- ^ @artists@ - a list of documenter names
  -> IO ()
 aboutDialogSetDocumenters self documenters =
-  withUTFStringArray0 documenters $ \documentersPtr ->
+  withCStringArray0 documenters $ \documentersPtr ->
   {# call gtk_about_dialog_set_documenters #}
     (toAboutDialog self)
     documentersPtr
@@ -366,7 +366,7 @@ aboutDialogGetDocumenters :: AboutDialogClass self => self -> IO [String]
 aboutDialogGetDocumenters self =
   {# call gtk_about_dialog_get_documenters #}
     (toAboutDialog self)
-  >>= peekUTFStringArray0
+  >>= peekCStringArray0
 
 -- | Returns the translator credits string which is displayed in the
 -- translators tab of the secondary credits dialog.
@@ -375,7 +375,7 @@ aboutDialogGetTranslatorCredits :: AboutDialogClass self => self -> IO String
 aboutDialogGetTranslatorCredits self =
   {# call gtk_about_dialog_get_translator_credits #}
     (toAboutDialog self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the translator credits string which is displayed in the translators
 -- tab of the secondary credits dialog.
@@ -385,7 +385,7 @@ aboutDialogGetTranslatorCredits self =
 --
 aboutDialogSetTranslatorCredits :: AboutDialogClass self => self -> String -> IO ()
 aboutDialogSetTranslatorCredits self translatorCredits =
-  withUTFString translatorCredits $ \translatorCreditsPtr ->
+  withCString translatorCredits $ \translatorCreditsPtr ->
   {# call gtk_about_dialog_set_translator_credits #}
     (toAboutDialog self)
     translatorCreditsPtr
@@ -416,7 +416,7 @@ aboutDialogGetLogoIconName :: AboutDialogClass self => self -> IO String
 aboutDialogGetLogoIconName self =
   {# call gtk_about_dialog_get_logo_icon_name #}
     (toAboutDialog self)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets the pixbuf to be displayed as logo in the about dialog. If it is
 -- @Nothing@, the default window icon set with 'windowSetDefaultIcon' will be
@@ -426,7 +426,7 @@ aboutDialogSetLogoIconName :: AboutDialogClass self => self
  -> Maybe String -- ^ @iconName@ - an icon name, or @Nothing@
  -> IO ()
 aboutDialogSetLogoIconName self iconName =
-  maybeWith withUTFString iconName $ \iconNamePtr ->
+  maybeWith withCString iconName $ \iconNamePtr ->
   {# call gtk_about_dialog_set_logo_icon_name #}
     (toAboutDialog self)
     iconNamePtr
@@ -440,7 +440,7 @@ aboutDialogSetEmailHook ::
  -> IO ()
 aboutDialogSetEmailHook func = do
   funcPtr <- mkAboutDialogActivateLinkFunc (\_ linkPtr _ -> do
-    link <- peekUTFString linkPtr
+    link <- peekCString linkPtr
     func link
     )
   {# call gtk_about_dialog_set_email_hook #}
@@ -458,7 +458,7 @@ aboutDialogSetUrlHook ::
  -> IO ()
 aboutDialogSetUrlHook func = do
   funcPtr <- mkAboutDialogActivateLinkFunc (\_ linkPtr _ -> do
-    link <- peekUTFString linkPtr
+    link <- peekCString linkPtr
     func link
     )
   {# call gtk_about_dialog_set_url_hook #}
diff --git a/Graphics/UI/Gtk/Windows/Assistant.chs b/Graphics/UI/Gtk/Windows/Assistant.chs
index b33c3fb..06af10e 100644
--- a/Graphics/UI/Gtk/Windows/Assistant.chs
+++ b/Graphics/UI/Gtk/Windows/Assistant.chs
@@ -114,7 +114,7 @@ module Graphics.UI.Gtk.Windows.Assistant (
 import Control.Monad	(liftM, unless)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -318,7 +318,7 @@ assistantSetPageTitle :: (AssistantClass self, WidgetClass page) => self
  -> String -- ^ @title@ - the new title for @page@
  -> IO ()
 assistantSetPageTitle self page title =
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call gtk_assistant_set_page_title #}
     (toAssistant self)
     (toWidget page)
@@ -336,7 +336,7 @@ assistantGetPageTitle self page =
   {# call gtk_assistant_get_page_title #}
     (toAssistant self)
     (toWidget page)
-  >>= peekUTFString
+  >>= peekCString
 
 -- | Sets a header image for @page@. This image is displayed in the header
 -- area of the assistant when @page@ is the current page.
diff --git a/Graphics/UI/Gtk/Windows/Dialog.chs b/Graphics/UI/Gtk/Windows/Dialog.chs
index 33aa064..bdce327 100644
--- a/Graphics/UI/Gtk/Windows/Dialog.chs
+++ b/Graphics/UI/Gtk/Windows/Dialog.chs
@@ -144,7 +144,7 @@ module Graphics.UI.Gtk.Windows.Dialog (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import Graphics.UI.Gtk.Abstract.Object	(makeNewObject)
@@ -231,7 +231,7 @@ dialogAddButton :: DialogClass self => self
  -> IO Button  -- ^ returns the button widget that was added
 dialogAddButton self buttonText responseId =
   makeNewObject mkButton $ liftM castPtr $
-  withUTFString buttonText $ \buttonTextPtr ->
+  withCString buttonText $ \buttonTextPtr ->
   {# call dialog_add_button #}
     (toDialog self)
     buttonTextPtr
diff --git a/Graphics/UI/Gtk/Windows/Invisible.chs b/Graphics/UI/Gtk/Windows/Invisible.chs
index ace3cd4..ff5fa48 100644
--- a/Graphics/UI/Gtk/Windows/Invisible.chs
+++ b/Graphics/UI/Gtk/Windows/Invisible.chs
@@ -53,7 +53,7 @@ module Graphics.UI.Gtk.Windows.Invisible (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.GError
 import System.Glib.Attributes
 import System.Glib.Properties
diff --git a/Graphics/UI/Gtk/Windows/MessageDialog.chs b/Graphics/UI/Gtk/Windows/MessageDialog.chs
index e55c152..17e1fa1 100644
--- a/Graphics/UI/Gtk/Windows/MessageDialog.chs
+++ b/Graphics/UI/Gtk/Windows/MessageDialog.chs
@@ -98,7 +98,7 @@ import Control.Monad	(liftM)
 
 import System.Glib.FFI
 {#import Graphics.UI.Gtk.Types#}
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Attributes
 import System.Glib.Properties
 import System.Glib.Flags	(Flags, fromFlags)
@@ -158,7 +158,7 @@ messageDialogNew
   -> String        -- ^ The text of the message
   -> IO MessageDialog
 messageDialogNew mWindow flags mType bType msg =
-  withUTFString (unPrintf msg) $ \msgPtr ->
+  withCString (unPrintf msg) $ \msgPtr ->
   makeNewObject mkMessageDialog $
   liftM (castPtr :: Ptr Widget -> Ptr MessageDialog) $
   call_message_dialog_new mWindow flags mType bType msgPtr
@@ -218,7 +218,7 @@ messageDialogSetMarkup :: MessageDialogClass self => self
  -> Markup -- ^ @str@ - markup string (see Pango markup format)
  -> IO ()
 messageDialogSetMarkup self str =
-  withUTFString (unPrintf str) $ \strPtr ->
+  withCString (unPrintf str) $ \strPtr ->
   {# call gtk_message_dialog_set_markup #}
     (toMessageDialog self)
     strPtr
@@ -229,7 +229,7 @@ messageDialogSetSecondaryMarkup :: MessageDialogClass self => self
  -> String -- ^ @str@ - markup string (see Pango markup format)
  -> IO ()
 messageDialogSetSecondaryMarkup self str =
-  withUTFString (unPrintf str) $ \strPtr ->
+  withCString (unPrintf str) $ \strPtr ->
   let (MessageDialog fPtr) = toMessageDialog self in
   withForeignPtr fPtr $ \ptr ->
   message_dialog_format_secondary_markup ptr strPtr
@@ -242,7 +242,7 @@ messageDialogSetSecondaryText :: MessageDialogClass self => self
  -> String -- ^ @str@ - text to be shown as second line
  -> IO ()
 messageDialogSetSecondaryText self str =
-  withUTFString str $ \strPtr ->
+  withCString str $ \strPtr ->
   let (MessageDialog fPtr) = toMessageDialog self in
   withForeignPtr fPtr $ \ptr ->
   message_dialog_format_secondary_text ptr strPtr
diff --git a/Graphics/UI/Gtk/Windows/Window.chs b/Graphics/UI/Gtk/Windows/Window.chs
index ff3544d..48c0677 100644
--- a/Graphics/UI/Gtk/Windows/Window.chs
+++ b/Graphics/UI/Gtk/Windows/Window.chs
@@ -264,7 +264,7 @@ module Graphics.UI.Gtk.Windows.Window (
 import Control.Monad	(liftM)
 
 import System.Glib.FFI
-import System.Glib.UTFString
+import System.Glib.CString
 import System.Glib.Flags
 import System.Glib.GError
 import System.Glib.Attributes
@@ -319,7 +319,7 @@ windowNewPopup =
 --
 windowSetTitle :: WindowClass self => self -> String -> IO ()
 windowSetTitle self title =
-  withUTFString title $ \titlePtr ->
+  withCString title $ \titlePtr ->
   {# call gtk_window_set_title #}
     (toWindow self)
     titlePtr
@@ -332,7 +332,7 @@ windowGetTitle self =
     (toWindow self)
   >>= \strPtr -> if strPtr == nullPtr
                    then return ""
-                   else peekUTFString strPtr
+                   else peekCString strPtr
 
 -- | Sets whether the user can resize a window. Windows are user resizable by
 -- default.
@@ -994,7 +994,7 @@ windowSetStartupId :: WindowClass self => self
  -> String
  -> IO ()
 windowSetStartupId self startupId =
-  withUTFString startupId $ \idPtr ->
+  withCString startupId $ \idPtr ->
   {# call window_set_startup_id #}
     (toWindow self)
     idPtr
@@ -1148,7 +1148,7 @@ windowSetRole :: WindowClass self => self
            -- restoring a session
  -> IO ()
 windowSetRole self role =
-  withUTFString role $ \rolePtr ->
+  withCString role $ \rolePtr ->
   {# call window_set_role #}
     (toWindow self)
     rolePtr
@@ -1162,7 +1162,7 @@ windowGetRole :: WindowClass self => self
 windowGetRole self =
   {# call gtk_window_get_role #}
     (toWindow self)
-  >>= maybePeek peekUTFString
+  >>= maybePeek peekCString
 
 -- | Asks to stick @window@, which means that it will appear on all user
 -- desktops. Note that you shouldn't assume the window is definitely stuck
@@ -1326,7 +1326,7 @@ windowSetIconName :: WindowClass self => self
  -> String -- ^ @name@ - the name of the themed icon
  -> IO ()
 windowSetIconName self name =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call gtk_window_set_icon_name #}
     (toWindow self)
     namePtr
@@ -1344,7 +1344,7 @@ windowGetIconName self =
     (toWindow self)
   >>= \strPtr -> if strPtr == nullPtr
                 then return ""
-                else peekUTFString strPtr
+                else peekCString strPtr
 
 -- | Sets an icon to be used as fallback for windows that haven't had
 -- 'windowSetIconList' called on them from a named themed icon, see
@@ -1356,7 +1356,7 @@ windowSetDefaultIconName ::
     String -- ^ @name@ - the name of the themed icon
  -> IO ()
 windowSetDefaultIconName name =
-  withUTFString name $ \namePtr ->
+  withCString name $ \namePtr ->
   {# call gtk_window_set_default_icon_name #}
     namePtr
 #endif
@@ -1386,7 +1386,7 @@ windowSetDefaultIconFromFile ::
 windowSetDefaultIconFromFile filename =
   liftM toBool $
   propagateGError $ \errPtr ->
-  withUTFString filename $ \filenamePtr ->
+  withCString filename $ \filenamePtr ->
   {# call gtk_window_set_default_icon_from_file #}
     filenamePtr
     errPtr
@@ -1402,7 +1402,7 @@ windowGetDefaultIconName ::
     IO String -- ^ returns the fallback icon name for windows
 windowGetDefaultIconName =
   {# call window_get_default_icon_name #}
-  >>= peekUTFString
+  >>= peekCString
 #endif
 
 #if GTK_CHECK_VERSION(2,2,0)
@@ -1444,7 +1444,7 @@ windowSetIconFromFile :: WindowClass self => self
  -> IO ()
 windowSetIconFromFile self filename =
   propagateGError $ \errPtr ->
-  withUTFString filename $ \filenamePtr -> do
+  withCString filename $ \filenamePtr -> do
 #if defined (WIN32) && GTK_CHECK_VERSION(2,6,0)
   {# call gtk_window_set_icon_from_file_utf8 #}
 #else
@@ -1556,7 +1556,7 @@ windowParseGeometry :: WindowClass self => self
  -> String
  -> IO Bool
 windowParseGeometry self geometry = liftM toBool $
-  withUTFString geometry $ \geometryPtr -> 
+  withCString geometry $ \geometryPtr -> 
   {# call window_parse_geometry #}
      (toWindow self)
      geometryPtr
diff --git a/System/Glib/CString.hs b/System/Glib/CString.hs
new file mode 100644
index 0000000..b787725
--- /dev/null
+++ b/System/Glib/CString.hs
@@ -0,0 +1,64 @@
+module System.Glib.CString (
+  withCString,
+  withCStringLen,
+  newCString,
+  newCStringLen,
+  peekCString,
+  peekCStringLen,
+  maybePeekCString,
+  readCString,
+  withCStrings,
+  withCStringArray,
+  withCStringArray0,
+  peekCStringArray,
+  peekCStringArray0,
+  readCStringArray0,
+  UTFCorrection,
+  genUTFOfs,
+  ofsToUTF,
+  ofsFromUTF
+) where
+
+import System.Glib.FFI
+import System.Glib.UTFString
+
+maybePeekCString :: CString -> IO (Maybe String)
+maybePeekCString strPtr = maybePeek peekCString strPtr
+
+withCStrings :: [String] -> ([CString] -> IO a) -> IO a
+withCStrings hsStrs = withCStrings' hsStrs []
+  where withCStrings' :: [String] -> [CString] -> ([CString] -> IO a) -> IO a
+        withCStrings' []     cs body = body (reverse cs)
+        withCStrings' (s:ss) cs body = withCString s $ \c ->
+                                       withCStrings' ss (c:cs) body
+
+withCStringArray :: [String] -> (Ptr CString -> IO a) -> IO a
+withCStringArray hsStr body =
+  withCStrings hsStr $ \cStrs -> do
+  withArray cStrs body
+
+withCStringArray0 :: [String] -> (Ptr CString -> IO a) -> IO a
+withCStringArray0 hsStr body =
+  withCStrings hsStr $ \cStrs -> do
+  withArray0 nullPtr cStrs body
+
+peekCStringArray :: Int -> Ptr CString -> IO [String]
+peekCStringArray len cStrArr = do
+  cStrs <- peekArray len cStrArr
+  mapM peekCString cStrs
+
+peekCStringArray0 :: Ptr CString -> IO [String]
+peekCStringArray0 cStrArr = do
+  cStrs <- peekArray0 nullPtr cStrArr
+  mapM peekCString cStrs
+
+readCStringArray0 :: Ptr CString -> IO [String]
+readCStringArray0 cStrArr | cStrArr == nullPtr = return []
+                          | otherwise = do
+  cStrs <- peekArray0 nullPtr cStrArr
+  strings <- mapM peekCString cStrs
+  g_strfreev cStrArr
+  return strings
+
+foreign import ccall unsafe "g_strfreev"
+  g_strfreev :: Ptr a -> IO ()
diff --git a/gtk.cabal b/gtk.cabal
index bd97975..01d5acc 100644
--- a/gtk.cabal
+++ b/gtk.cabal
@@ -345,6 +345,7 @@ Library
           Graphics.UI.Gtk.General.Threading
           Graphics.UI.Gtk.Types
           Graphics.UI.Gtk.Signals
+          System.Glib.CString
 
         extensions:     ForeignFunctionInterface
         c-sources: Graphics/UI/Gtk/ModelView/Gtk2HsStore.c
